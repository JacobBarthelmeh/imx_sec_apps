From a096b8079a3d999d452fcfad41695535c34ba7a4 Mon Sep 17 00:00:00 2001
From: Gaurav Jain <gaurav.jain@nxp.com>
Date: Mon, 7 Jun 2021 13:16:36 +0530
Subject: [PATCH] uboot: Added command and descriptors to provison ddek

command actions:
1) generate the MPPubK
2) generate PKEK = hash(MPPUBK)
3) Read the encrypted ddek from RAM
4) Decrypt the ddek(encrypted) using PKEK
5) Encapsulate the ddek in black blob
6) Add the 20 bytes TAG to black blob

Signed-off-by: Gaurav Jain <gaurav.jain@nxp.com>
---
 cmd/Kconfig                      |   5 +
 cmd/Makefile                     |   1 +
 cmd/cmd_prov_ddek.c              | 168 +++++++++++++++++++++++++++
 configs/imx8mm_evk_defconfig     |   4 +
 configs/imx8mn_evk_defconfig     |   4 +
 drivers/crypto/fsl/Makefile      |   1 +
 drivers/crypto/fsl/desc.h        |   5 +
 drivers/crypto/fsl/fsl_mfgprot.c |   5 +-
 drivers/crypto/fsl/jobdesc.c     |  57 ++++++++-
 drivers/crypto/fsl/jobdesc.h     |   8 ++
 drivers/crypto/fsl/jr.c          |   4 +-
 drivers/crypto/fsl/prov_ddek.c   | 192 +++++++++++++++++++++++++++++++
 drivers/crypto/fsl/tag_object.c  |  98 ++++++++++++++++
 drivers/crypto/fsl/tag_object.h  |  62 ++++++++++
 include/fsl_sec.h                |  17 ++-
 15 files changed, 625 insertions(+), 6 deletions(-)
 create mode 100644 cmd/cmd_prov_ddek.c
 create mode 100644 drivers/crypto/fsl/prov_ddek.c
 create mode 100644 drivers/crypto/fsl/tag_object.c
 create mode 100644 drivers/crypto/fsl/tag_object.h

diff --git a/cmd/Kconfig b/cmd/Kconfig
index 300d800e2f..a62789035c 100644
--- a/cmd/Kconfig
+++ b/cmd/Kconfig
@@ -2195,3 +2195,8 @@ config CMD_UBIFS
 	  UBIFS is a file system for flash devices which works on top of UBI.
 
 endmenu
+
+config CMD_PROVISION_DDEK
+	bool "Provision ddek as black blob"
+	help
+	  ddek provision command support.
diff --git a/cmd/Makefile b/cmd/Makefile
index 7c62e3becf..60b6c48b2b 100644
--- a/cmd/Makefile
+++ b/cmd/Makefile
@@ -183,6 +183,7 @@ obj-$(CONFIG_RISCV) += riscv/
 obj-$(CONFIG_X86) += x86/
 
 obj-$(CONFIG_ARCH_MVEBU) += mvebu/
+obj-$(CONFIG_CMD_PROVISION_DDEK) += cmd_prov_ddek.o
 endif # !CONFIG_SPL_BUILD
 
 obj-$(CONFIG_$(SPL_)CMD_TLV_EEPROM) += tlv_eeprom.o
diff --git a/cmd/cmd_prov_ddek.c b/cmd/cmd_prov_ddek.c
new file mode 100644
index 0000000000..d9c13f8524
--- /dev/null
+++ b/cmd/cmd_prov_ddek.c
@@ -0,0 +1,168 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * @file - cmd_prov_ddek.c
+ * @brief - NXP command support
+ * Command for provisioning encrypted ddek as black blob,
+ *
+ * Copyright 2021 NXP
+ * All rights reserved.
+ *
+ */
+
+/*
+ *Concepts:
+ *
+ *  - black key: secure encrypted key that can only be used by the CAAM HW
+ *               module on the device generating this key.
+ *  - black blob: black blob is an encapsulation of black data (key) that can
+ *                only be decapsulated by the initiator device. The
+ *                decapsulation will result in a new black data readable only
+ *                by the CAAM HW.
+ *
+ *
+ *Generation of the ddek black blob:
+ *
+ *     1) Compile the bootloader with configuration:
+ *        CONFIG_IMX_HAB
+ *        CONFIG_FSL_CAAM
+ *        CONFIG_IMX_CAAM_MFG_PROT
+ *        CONFIG_CMD_PROVISION_DDEK
+ *     2) Boot the bootloader on the board
+ *     3) Bootloader will generate the MPPubK
+ *     4) PKEK = hash(MPPUBK)
+ *     5) Read the encrypted ddek from RAM
+ *     6) Decrypt the ddek(encrypted) using PKEK
+ *     7) Encapsulate the ddek in black blob
+ *     8) Add the 20 bytes TAG to black blob
+ *     9) Copy the black blob in a binary file.
+ *        The file must have a size of 112 bytes (0x70 bytes).
+ */
+
+#include <common.h>
+#include <command.h>
+#include <malloc.h>
+#include <memalign.h>
+#include <asm/byteorder.h>
+#include <linux/compiler.h>
+#include <fsl_sec.h>
+#include <asm/arch/clock.h>
+
+/* Key modifier for CAAM blobs, used as a revision number */
+static const char caam_key_modifier[16] = {
+		'C', 'A', 'A', 'M', '_', 'K', 'E', 'Y',
+		'_', 'T', 'Y', 'P', 'E', '_', 'V', '1',
+};
+
+/**
+ * do_export_ddek_blob() - Handle the "export_ddek_blob" command-line command
+ * @cmdtp:	Command data struct pointer
+ * @flag:	Command flag
+ * @argc:	Command-line argument count
+ * @argv:	Array of command-line arguments
+ *
+ * Returns zero on success, CMD_RET_USAGE in case of misuse and negative
+ * on error.
+ */
+static int do_export_ddek_blob(cmd_tbl_t *cmdtp, int flag, int argc, char *const argv[])
+{
+	ulong src_addr, dst_addr;
+	uint8_t *src_ptr, *dst_ptr;
+	uint8_t *mppubk = NULL, *pkek = NULL, *ddek_black = NULL;
+	size_t key_len = AES256_KEY_SZ, pkek_len = SHA256_BYTES;
+	size_t blob_len, blob_max_len;
+	int ret = 0;
+	ALLOC_CACHE_ALIGN_BUFFER(uint8_t, km_ptr, 16);
+
+	if (argc != 3)
+		return CMD_RET_USAGE;
+
+	/* Initialize Sec */
+	hab_caam_clock_enable(1);
+
+	u32 out_jr_size = sec_in32(CONFIG_SYS_FSL_JR0_ADDR + FSL_CAAM_ORSR_JRa_OFFSET);
+	if (out_jr_size != FSL_CAAM_MAX_JR_SIZE)
+		sec_init();
+
+	/* generate mppubk */
+	mppubk = malloc_cache_aligned(FSL_CAAM_MP_PUBK_BYTES);
+	if (!mppubk) {
+		printf("Failed to allocate mem for mppubk\n");
+		ret = -ENOMEM;
+		goto exit;
+	}
+
+	ret = gen_mppubk(mppubk);
+	if (ret) {
+		printf("Failed to generate MPPubK\n");
+		goto exit;
+	}
+
+	/* Derive PKEK = SHA256(MPPUBK) */
+	pkek = malloc_cache_aligned(pkek_len);
+	if (!pkek) {
+		printf("Failed to allocate memory for pkek\n");
+		ret = -ENOMEM;
+		goto exit;
+	}
+
+	ret = hash(mppubk, FSL_CAAM_MP_PUBK_BYTES, pkek, pkek_len);
+	if (ret) {
+		goto exit;
+	}
+
+	/* use pkek to decrypt ddek(encrypted) */
+	src_addr = simple_strtoul(argv[1], NULL, 16);
+	src_ptr = (uint8_t *)(uintptr_t)src_addr;
+
+	ddek_black = malloc_cache_aligned(key_len);
+	if (!ddek_black) {
+		printf("Failed to allocate memory for ddek_black\n");
+		ret = -ENOMEM;
+		goto exit;
+	}
+
+	ret = aesecb_decrypt(pkek, pkek_len, src_ptr, ddek_black, key_len);
+	if (ret) {
+		goto exit;
+	}
+
+	/* create ddek black blob */
+	dst_addr = simple_strtoul(argv[2], NULL, 16);
+	dst_ptr = (uint8_t *)(uintptr_t)dst_addr;
+
+	/* copy key modifier, must be same as used in kernel */
+	memcpy(km_ptr, caam_key_modifier, 16);
+
+	ret = ddek_black_blob((uint8_t *)km_ptr, ddek_black, dst_ptr, key_len);
+	if (ret) {
+		goto exit;
+	}
+
+	/* Tag the black blob so it can be passed to kernel */
+	blob_len = BLOB_SIZE(key_len) + CCM_OVERHEAD;
+	blob_max_len = MAX_BLOB_SIZE;
+	ret = tag_black_obj(dst_ptr, blob_len, key_len, blob_max_len);
+	if (ret)
+		printf("Failed to tag black blob: %d\n", ret);
+
+exit:
+	if (mppubk)
+		free(mppubk);
+	if (pkek)
+		free(pkek);
+	if (ddek_black)
+		free(ddek_black);
+
+	return ret;
+}
+/***************************************************/
+
+U_BOOT_CMD(
+	export_ddek_blob , 3, 0, do_export_ddek_blob,
+	"Provision encrypted ddek as ddek black blob. ",
+	"src_addr dst_addr \n\n"
+	" - src_addr: source addr which has encrypted DDEK(32 byte) to provision.\n"
+	"             must be 64 byte aligned.\n"
+	" - dst_addr: destination addr which will have ddek black blob(112 byte).\n"
+	"             must be 64 byte aligned.\n"
+);
diff --git a/configs/imx8mm_evk_defconfig b/configs/imx8mm_evk_defconfig
index 25044aa2a2..f8b6088119 100644
--- a/configs/imx8mm_evk_defconfig
+++ b/configs/imx8mm_evk_defconfig
@@ -139,3 +139,7 @@ CONFIG_DM_VIDEO=y
 CONFIG_VIDEO_LCD_RAYDIUM_RM67191=y
 CONFIG_VIDEO_ADV7535=y
 CONFIG_SYS_WHITE_ON_BLACK=y
+CONFIG_IMX_HAB=y
+CONFIG_FSL_CAAM=y
+CONFIG_IMX_CAAM_MFG_PROT=y
+CONFIG_CMD_PROVISION_DDEK=y
diff --git a/configs/imx8mn_evk_defconfig b/configs/imx8mn_evk_defconfig
index 07635ca9c6..58de103724 100644
--- a/configs/imx8mn_evk_defconfig
+++ b/configs/imx8mn_evk_defconfig
@@ -139,3 +139,7 @@ CONFIG_DM_VIDEO=y
 CONFIG_VIDEO_LCD_RAYDIUM_RM67191=y
 CONFIG_VIDEO_ADV7535=y
 CONFIG_SYS_WHITE_ON_BLACK=y
+CONFIG_IMX_HAB=y
+CONFIG_FSL_CAAM=y
+CONFIG_IMX_CAAM_MFG_PROT=y
+CONFIG_CMD_PROVISION_DDEK=y
diff --git a/drivers/crypto/fsl/Makefile b/drivers/crypto/fsl/Makefile
index 3f494d39b4..202d6e4b0d 100644
--- a/drivers/crypto/fsl/Makefile
+++ b/drivers/crypto/fsl/Makefile
@@ -7,3 +7,4 @@ obj-$(CONFIG_FSL_CAAM) += jr.o fsl_hash.o jobdesc.o error.o
 obj-$(CONFIG_CMD_BLOB)$(CONFIG_IMX_CAAM_DEK_ENCAP) += fsl_blob.o
 obj-$(CONFIG_RSA_FREESCALE_EXP) += fsl_rsa.o
 obj-$(CONFIG_IMX_CAAM_MFG_PROT) += fsl_mfgprot.o
+obj-$(CONFIG_CMD_PROVISION_DDEK) += prov_ddek.o tag_object.o
diff --git a/drivers/crypto/fsl/desc.h b/drivers/crypto/fsl/desc.h
index 4e16de7874..0dcec90cfd 100644
--- a/drivers/crypto/fsl/desc.h
+++ b/drivers/crypto/fsl/desc.h
@@ -4,6 +4,7 @@
  * Definitions to support CAAM descriptor instruction generation
  *
  * Copyright 2008-2014 Freescale Semiconductor, Inc.
+ * Copyright 2021 NXP.
  *
  * Based on desc.h file in linux drivers/crypto/caam
  */
@@ -435,6 +436,7 @@
 /* Assuming OP_TYPE = OP_TYPE_UNI_PROTOCOL */
 #define OP_PCLID_SECMEM		0x08
 #define OP_PCLID_BLOB		(0x0d << OP_PCLID_SHIFT)
+#define OP_PCL_BLOB_BLACK	0x0004
 #define OP_PCLID_SECRETKEY	(0x11 << OP_PCLID_SHIFT)
 #define OP_PCLID_PUBLICKEYPAIR	(0x14 << OP_PCLID_SHIFT)
 #define OP_PCLID_DSA_SIGN	(0x15 << OP_PCLID_SHIFT)
@@ -492,6 +494,9 @@
 #define OP_ALG_AAI_SHIFT	4
 #define OP_ALG_AAI_MASK		(0x1ff << OP_ALG_AAI_SHIFT)
 
+/* block cipher AAI set */
+#define OP_ALG_AAI_ECB		(0x20 << OP_ALG_AAI_SHIFT)
+
 /* randomizer AAI set */
 #define OP_ALG_AAI_RNG		(0x00 << OP_ALG_AAI_SHIFT)
 #define OP_ALG_AAI_RNG_NZB	(0x10 << OP_ALG_AAI_SHIFT)
diff --git a/drivers/crypto/fsl/fsl_mfgprot.c b/drivers/crypto/fsl/fsl_mfgprot.c
index bbb8065143..e9d1eabb9f 100644
--- a/drivers/crypto/fsl/fsl_mfgprot.c
+++ b/drivers/crypto/fsl/fsl_mfgprot.c
@@ -1,12 +1,13 @@
 /*
  * Copyright 2014-2016 Freescale Semiconductor, Inc.
- * Copyright 2017 NXP
+ * Copyright 2017, 2021 NXP
  *
  * SPDX-License-Identifier:	GPL-2.0+
  *
  */
 
 #include <common.h>
+#include <cpu_func.h>
 #include <errno.h>
 #include <fsl_sec.h>
 #include <memalign.h>
@@ -95,7 +96,7 @@ int gen_mppubk(u8 *dst)
 	flush_dcache_range((unsigned long)dst, (unsigned long)dst + size);
 
 	/* Execute Job Descriptor */
-	puts("\nGenerating Manufacturing Protection Public Key\n");
+	debug("\nGenerating Manufacturing Protection Public Key\n");
 
 	ret = run_descriptor_jr(dsc);
 	if (ret) {
diff --git a/drivers/crypto/fsl/jobdesc.c b/drivers/crypto/fsl/jobdesc.c
index 0494941ea3..8cf67069f8 100644
--- a/drivers/crypto/fsl/jobdesc.c
+++ b/drivers/crypto/fsl/jobdesc.c
@@ -4,7 +4,7 @@
  * Basic job descriptor construction
  *
  * Copyright 2014 Freescale Semiconductor, Inc.
- * Copyright 2018 NXP
+ * Copyright 2018, 2021 NXP
  *
  */
 
@@ -254,6 +254,61 @@ void inline_cnstr_jobdesc_blob_decap(uint32_t *desc, uint8_t *key_idnfr,
 
 	append_operation(desc, OP_TYPE_DECAP_PROTOCOL | OP_PCLID_BLOB);
 }
+
+void inline_cnstr_jobdesc_black_blob_encap(uint32_t *desc, uint8_t *key_idnfr,
+					uint8_t *plain_txt, uint8_t *enc_blob,
+					uint32_t in_sz)
+{
+	caam_dma_addr_t dma_addr_key_idnfr, dma_addr_in, dma_addr_out;
+	uint32_t key_sz = KEY_IDNFR_SZ_BYTES;
+	/* output blob will have 32 bytes key blob in beginning and
+	 * 16 byte HMAC identifier at end of data blob */
+	uint32_t out_sz = in_sz + KEY_BLOB_SIZE + MAC_SIZE;
+
+	dma_addr_key_idnfr = virt_to_phys((void *)key_idnfr);
+	dma_addr_in     = virt_to_phys((void *)plain_txt);
+	dma_addr_out    = virt_to_phys((void *)enc_blob);
+
+	init_job_desc(desc, 0);
+
+	append_key(desc, dma_addr_key_idnfr, key_sz, CLASS_2);
+
+	append_seq_in_ptr(desc, dma_addr_in, in_sz, 0);
+
+	append_seq_out_ptr(desc, dma_addr_out, out_sz, 0);
+
+	append_operation(desc, OP_TYPE_ENCAP_PROTOCOL | OP_PCLID_BLOB | OP_PCL_BLOB_BLACK);
+}
+
+void inline_cnstr_jobdesc_aes_ecb_decrypt(uint32_t *desc, uint8_t *key, uint32_t key_len,
+					uint8_t *src, uint8_t *dst, uint32_t len)
+{
+	caam_dma_addr_t dma_addr_key, dma_addr_src, dma_addr_dst;
+
+	dma_addr_key = virt_to_phys((void *)key);
+	dma_addr_src = virt_to_phys((void *)src);
+	dma_addr_dst = virt_to_phys((void *)dst);
+
+	memset(desc, 0, MAX_CAAM_DESCSIZE*4);
+	init_job_desc(desc, 0);
+
+	/* Key command: Load key in class 1 key register. */
+	append_key(desc, dma_addr_key, key_len, CLASS_1 | KEY_DEST_CLASS_REG);
+
+	/* AES ECB Decrypt Operation command. */
+	append_operation(desc, OP_TYPE_CLASS1_ALG | OP_ALG_ALGSEL_AES | OP_ALG_AAI_ECB
+				| OP_ALG_AS_INITFINAL | OP_ALG_DECRYPT);
+
+	/* Fifoload command: load input data. */
+	append_fifo_load(desc, dma_addr_src, len, FIFOLD_CLASS_CLASS1 | FIFOLD_TYPE_MSG
+						| FIFOLD_TYPE_LAST1);
+
+	/* Fifostore command: store decrypted key in black. */
+	append_jump(desc, JUMP_CLASS_CLASS1 | JUMP_COND_NOP | 1);
+	append_move(desc, MOVE_SRC_OUTFIFO | MOVE_DEST_CLASS2KEY | MOVE_WAITCOMP | len);
+	append_load_imm_u32(desc, len, CLASS_2 | LDST_SRCDST_WORD_KEYSZ_REG | LDST_IMM);
+	append_fifo_store(desc, dma_addr_dst, len, CLASS_2 | FIFOST_TYPE_KEY_KEK);
+}
 #endif
 /*
  * Descriptor to instantiate RNG State Handle 0 in normal mode and
diff --git a/drivers/crypto/fsl/jobdesc.h b/drivers/crypto/fsl/jobdesc.h
index d782c46b9d..cfbc3d7e91 100644
--- a/drivers/crypto/fsl/jobdesc.h
+++ b/drivers/crypto/fsl/jobdesc.h
@@ -1,6 +1,7 @@
 /* SPDX-License-Identifier: GPL-2.0+ */
 /*
  * Copyright 2014 Freescale Semiconductor, Inc.
+ * Copyright 2021 NXP.
  *
  */
 
@@ -39,6 +40,13 @@ void inline_cnstr_jobdesc_blob_decap(uint32_t *desc, uint8_t *key_idnfr,
 				     uint8_t *enc_blob, uint8_t *plain_txt,
 				     uint32_t out_sz);
 
+void inline_cnstr_jobdesc_black_blob_encap(uint32_t *desc, uint8_t *key_idnfr,
+					uint8_t *plain_txt, uint8_t *enc_blob,
+					uint32_t in_sz);
+
+void inline_cnstr_jobdesc_aes_ecb_decrypt(uint32_t *desc, uint8_t *key, uint32_t key_len,
+                                        uint8_t *src, uint8_t *dst, uint32_t len);
+
 void inline_cnstr_jobdesc_rng_instantiation(uint32_t *desc, int handle);
 
 void inline_cnstr_jobdesc_pkha_rsaexp(uint32_t *desc,
diff --git a/drivers/crypto/fsl/jr.c b/drivers/crypto/fsl/jr.c
index 461fe19a07..8f91adfd7d 100644
--- a/drivers/crypto/fsl/jr.c
+++ b/drivers/crypto/fsl/jr.c
@@ -1,7 +1,7 @@
 // SPDX-License-Identifier: GPL-2.0+
 /*
  * Copyright 2008-2014 Freescale Semiconductor, Inc.
- * Copyright 2018 NXP
+ * Copyright 2018, 2021 NXP
  *
  * Based on CAAM driver in drivers/crypto/caam in Linux
  */
@@ -656,7 +656,7 @@ int sec_init_idx(uint8_t sec_idx)
 			printf("SEC%u: RNG instantiation failed\n", sec_idx);
 			return -1;
 		}
-		printf("SEC%u: RNG instantiated\n", sec_idx);
+		debug("SEC%u: RNG instantiated\n", sec_idx);
 	}
 #endif
 	return ret;
diff --git a/drivers/crypto/fsl/prov_ddek.c b/drivers/crypto/fsl/prov_ddek.c
new file mode 100644
index 0000000000..fe66ef3715
--- /dev/null
+++ b/drivers/crypto/fsl/prov_ddek.c
@@ -0,0 +1,192 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright 2021 NXP.
+ *
+ */
+
+#include <common.h>
+#include <cpu_func.h>
+#include <malloc.h>
+#include <memalign.h>
+#include <fsl_sec.h>
+#include <linux/errno.h>
+#include "jobdesc.h"
+#include "desc.h"
+#include "jr.h"
+
+/**
+ * hash() - Calculate the hash of message
+ * @msg:        - meesage address
+ * @msgsz:      - Size of message to be hashed
+ * @digest:     - Destination address which will contain the hash
+ * @digest_sz:  - Size of hash vlaue
+ *
+ * Note: Start and end of the msg and digest buffers have to be aligned to
+ * the cache line size (ARCH_DMA_MINALIGN) for the CAAM operation to succeed.
+ *
+ * Returns zero on success, negative on error.
+ */
+int hash(u8 *msg, u32 msgsz, u8 *digest, u32 digest_sz)
+{
+	int ret, size;
+	u32 alg_type = OP_ALG_ALGSEL_SHA256;
+	u32 *desc;
+
+	if (!IS_ALIGNED((uintptr_t)msg, ARCH_DMA_MINALIGN) ||
+	    !IS_ALIGNED((uintptr_t)digest, ARCH_DMA_MINALIGN)) {
+		puts("Error: hash: Address arguments are not aligned!\n");
+		return -EINVAL;
+	}
+
+	debug("\nHash Operation\n");
+	desc = malloc_cache_aligned(sizeof(int) * MAX_CAAM_DESCSIZE);
+	if (!desc) {
+		debug("Not enough memory for descriptor allocation\n");
+		return -ENOMEM;
+	}
+
+	size = ALIGN(msgsz, ARCH_DMA_MINALIGN);
+	flush_dcache_range((unsigned long)msg, (unsigned long)msg + size);
+
+	inline_cnstr_jobdesc_hash(desc, msg, msgsz, digest, alg_type, digest_sz, 0);
+
+	size = ALIGN(sizeof(int) * MAX_CAAM_DESCSIZE, ARCH_DMA_MINALIGN);
+	flush_dcache_range((unsigned long)desc, (unsigned long)desc + size);
+	size = ALIGN(digest_sz, ARCH_DMA_MINALIGN);
+	flush_dcache_range((unsigned long)digest, (unsigned long)digest + size);
+
+	ret = run_descriptor_jr(desc);
+
+	if (ret) {
+		printf("Error in Hash operation %d\n", ret);
+	} else {
+		invalidate_dcache_range((unsigned long)digest, (unsigned long)digest + size);
+		debug("Hash operation Success.\n");
+	}
+
+	free(desc);
+	return ret;
+}
+
+/**
+ * aesecb_decrypt() - Decrypt data using AES-256-ECB
+ * @key_mod:    - Key address
+ * @key_len:    - Key length
+ * @src:        - Source address (Encrypted key)
+ * @dst:        - Destination address (decrypted key in black)
+ * @len:        - Size of data to be decrypted
+ *
+ * Note: Start and end of the key, src and dst buffers have to be aligned to
+ * the cache line size (ARCH_DMA_MINALIGN) for the CAAM operation to succeed.
+ *
+ * Returns zero on success, negative on error.
+ */
+int aesecb_decrypt(u8 *key, u32 key_len, u8 *src, u8 *dst, u32 len)
+{
+	int ret, size, i = 0;
+	u32 *desc;
+
+	if (!IS_ALIGNED((uintptr_t)key, ARCH_DMA_MINALIGN) ||
+	    !IS_ALIGNED((uintptr_t)src, ARCH_DMA_MINALIGN) ||
+	    !IS_ALIGNED((uintptr_t)dst, ARCH_DMA_MINALIGN)) {
+		puts("Error: aesecb_decrypt: Address arguments are not aligned!\n");
+		return -EINVAL;
+	}
+
+	debug("\nAES ECB decryption Operation\n");
+	desc = malloc_cache_aligned(sizeof(int) * MAX_CAAM_DESCSIZE);
+	if (!desc) {
+		debug("Not enough memory for descriptor allocation\n");
+		return -ENOMEM;
+	}
+
+	size = ALIGN(key_len, ARCH_DMA_MINALIGN);
+	flush_dcache_range((unsigned long)key, (unsigned long)key + size);
+	size = ALIGN(len, ARCH_DMA_MINALIGN);
+	flush_dcache_range((unsigned long)src, (unsigned long)src + size);
+
+	inline_cnstr_jobdesc_aes_ecb_decrypt(desc, key, key_len, src, dst, len);
+
+	debug("Descriptor dump:\n");
+	for (i = 0; i < 20; i++)
+		debug("Word[%d]: %08x\n", i, *(desc + i));
+
+	size = ALIGN(sizeof(int) * MAX_CAAM_DESCSIZE, ARCH_DMA_MINALIGN);
+	flush_dcache_range((unsigned long)desc, (unsigned long)desc + size);
+	size = ALIGN(len, ARCH_DMA_MINALIGN);
+	flush_dcache_range((unsigned long)dst, (unsigned long)dst + size);
+
+	ret = run_descriptor_jr(desc);
+
+	if (ret) {
+		printf("Error in AES ECB decryption %d\n", ret);
+	} else {
+		invalidate_dcache_range((unsigned long)dst, (unsigned long)dst + size);
+		debug("AES ECB decryption Success.\n");
+	}
+
+	free(desc);
+	return ret;
+}
+
+
+
+/**
+ * ddek_black_blob() - Encapsulate ddek as a black blob
+ * @key_mod:    - Key modifier address
+ * @src:        - Source address (data)
+ * @dst:        - Destination address (black blob)
+ * @len:        - Size of data to be encapsulated
+ *
+ * Note: Start and end of the key_mod, src and dst buffers have to be aligned to
+ * the cache line size (ARCH_DMA_MINALIGN) for the CAAM operation to succeed.
+ *
+ * Returns zero on success, negative on error.
+ */
+int ddek_black_blob(u8 *key_mod, u8 *src, u8 *dst, u32 len)
+{
+	int ret, size, i = 0;
+	u32 *desc;
+
+	if (!IS_ALIGNED((uintptr_t)key_mod, ARCH_DMA_MINALIGN) ||
+	    !IS_ALIGNED((uintptr_t)src, ARCH_DMA_MINALIGN) ||
+	    !IS_ALIGNED((uintptr_t)dst, ARCH_DMA_MINALIGN)) {
+		puts("Error: black_blob_encap: Address arguments are not aligned!\n");
+		return -EINVAL;
+	}
+
+	debug("\nEncapsulating data to form ddek black blob\n");
+	desc = malloc_cache_aligned(sizeof(int) * MAX_CAAM_DESCSIZE);
+	if (!desc) {
+		debug("Not enough memory for descriptor allocation\n");
+		return -ENOMEM;
+	}
+
+	size = ALIGN(16, ARCH_DMA_MINALIGN);
+	flush_dcache_range((unsigned long)key_mod, (unsigned long)key_mod + size);
+	size = ALIGN(len, ARCH_DMA_MINALIGN);
+	flush_dcache_range((unsigned long)src, (unsigned long)src + size);
+
+	inline_cnstr_jobdesc_black_blob_encap(desc, key_mod, src, dst, len);
+
+	debug("Descriptor dump:\n");
+	for (i = 0; i < 14; i++)
+		debug("Word[%d]: %08x\n", i, *(desc + i));
+
+	size = ALIGN(sizeof(int) * MAX_CAAM_DESCSIZE, ARCH_DMA_MINALIGN);
+	flush_dcache_range((unsigned long)desc, (unsigned long)desc + size);
+	flush_dcache_range((unsigned long)dst, (unsigned long)dst + size);
+
+	ret = run_descriptor_jr(desc);
+
+	if (ret) {
+		printf("Error in ddek black blob encapsulation: %d\n", ret);
+	} else {
+		size = ALIGN(BLOB_SIZE(len), ARCH_DMA_MINALIGN);
+		invalidate_dcache_range((unsigned long)dst, (unsigned long)dst + size);
+		debug("ddek black Blob encapsulation successful.\n");
+	}
+
+	free(desc);
+	return ret;
+}
diff --git a/drivers/crypto/fsl/tag_object.c b/drivers/crypto/fsl/tag_object.c
new file mode 100644
index 0000000000..904c479086
--- /dev/null
+++ b/drivers/crypto/fsl/tag_object.c
@@ -0,0 +1,98 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright 2021 NXP
+ *
+ * Based on Tag object in drivers/crypto/caam in Linux
+ */
+
+#include "tag_object.h"
+
+
+/**
+ * init_tag_object_header - Initialize the tag object header by setting up
+ *			the TAG_OBJECT_MAGIC number, tag object version,
+ *			a valid type and the object's length
+ * @header:		The header configuration to initialize
+ * @version:		The tag object version
+ * @type:		The tag object type
+ * @red_key_len:	The red key length
+ * @obj_len:		The object (actual data) length
+ */
+void init_tag_object_header(struct header_conf *header, u32 version,
+			    u32 type, size_t red_key_len, size_t obj_len)
+{
+	header->_magic_number = TAG_OBJECT_MAGIC;
+	header->version = version;
+	header->type = type;
+	header->red_key_len = red_key_len;
+	header->obj_len = obj_len;
+}
+
+/**
+ * set_tag_object_header_conf - Set tag object header configuration
+ * @header:			The tag object header configuration to set
+ * @buffer:			The buffer needed to be tagged
+ * @buf_size:			The buffer size
+ * @tag_obj_size:		The tagged object size
+ *
+ * Return:			'0' on success, error code otherwise
+ */
+int set_tag_object_header_conf(const struct header_conf *header,
+			       void *buffer, size_t buf_size, u32 *tag_obj_size)
+{
+	/* Retrieve the tag object */
+	struct tagged_object *tag_obj = (struct tagged_object *)buffer;
+	/*
+	 * Requested size for the tagged object is the buffer size
+	 * and the header configuration size (TAG_OVERHEAD_SIZE)
+	 */
+	size_t req_size = buf_size + TAG_OVERHEAD_SIZE;
+
+	/*
+	 * Check if the configuration can be set,
+	 * based on the size of the tagged object
+	 */
+	if (*tag_obj_size < req_size)
+		return -EINVAL;
+
+	/*
+	 * Buffers might overlap, use memmove to
+	 * copy the buffer into the tagged object
+	 */
+	memmove(&tag_obj->object, buffer, buf_size);
+	/* Copy the tag object header configuration into the tagged object */
+	memcpy(&tag_obj->header, header, TAG_OVERHEAD_SIZE);
+	/* Set tagged object size */
+	*tag_obj_size = req_size;
+
+	return 0;
+}
+
+/**
+ * tag_black_obj      - Tag a black object (blob/key) with a tag object header.
+ *
+ * @black_obj         : contains black key/blob,
+ *                      obtained from CAAM, that needs to be tagged
+ * @black_obj_len     : size of black object (blob/key)
+ * @key_len           : size of plain key
+ * @black_max_len     : The maximum size of the black object (blob/key)
+ *
+ * Return             : '0' on success, error code otherwise
+ */
+int tag_black_obj(u8 *black_obj, size_t black_obj_len, size_t key_len,
+                                        size_t black_max_len)
+{
+	struct header_conf tag;
+	u32 type = 1;				/*ECB encrypted black key*/
+	int ret;
+	u32 size_tagged = black_max_len;
+
+	if (!black_obj)
+		return -EINVAL;
+
+	/* Prepare and set the tag */
+	init_tag_object_header(&tag, 0, type, key_len, black_obj_len);
+	ret = set_tag_object_header_conf(&tag, black_obj, black_obj_len, &size_tagged);
+
+	return ret;
+}
diff --git a/drivers/crypto/fsl/tag_object.h b/drivers/crypto/fsl/tag_object.h
new file mode 100644
index 0000000000..9f4ecf9b7c
--- /dev/null
+++ b/drivers/crypto/fsl/tag_object.h
@@ -0,0 +1,62 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * Copyright 2021 NXP.
+ *
+ */
+
+#ifndef _TAG_OBJECT_H_
+#define _TAG_OBJECT_H_
+
+#include <common.h>
+#include <linux/compiler.h>
+#include "type.h"
+
+/**
+ * Magic number to identify the tag object structure
+ * 0x54 = 'T'
+ * 0x61 = 'a'
+ * 0x67 = 'g'
+ * 0x4f = 'O'
+ */
+#define TAG_OBJECT_MAGIC	0x5461674f
+#define TAG_OVERHEAD_SIZE	sizeof(struct header_conf)
+
+/**
+ * struct header_conf - Header configuration structure, which represents
+ *			the metadata (or simply a header) applied to the
+ *			actual data (e.g. black key)
+ * @_magic_number     : A magic number to identify the structure
+ * @version           : The version of the data contained (e.g. tag object)
+ * @type              : The type of data contained (e.g. black key, blob, etc.)
+ * @red_key_len       : Length of the red key to be loaded by CAAM (for key
+ *                      generation or blob encapsulation)
+ * @obj_len           : The total length of the (black/red) object (key/blob),
+ *                      after encryption/encapsulation
+ */
+struct header_conf {
+	u32 _magic_number;
+	u32 version;
+	u32 type;
+	u32 red_key_len;
+	u32 obj_len;
+};
+
+/**
+ * struct tagged_object - Tag object structure, which represents the metadata
+ *                        (or simply a header) and the actual data
+ *                        (e.g. black key) obtained from hardware
+ * @tag                 : The configuration of the data (e.g. header)
+ * @object              : The actual data (e.g. black key)
+ */
+struct tagged_object {
+	struct header_conf header;
+	char object;
+};
+
+void init_tag_object_header(struct header_conf *header, u32 version,
+			    u32 type, size_t red_key_len, size_t obj_len);
+
+int set_tag_object_header_conf(const struct header_conf *header,
+			       void *buffer, size_t obj_size, u32 *to_size);
+
+#endif /* _TAG_OBJECT_H_ */
diff --git a/include/fsl_sec.h b/include/fsl_sec.h
index 5068388bf2..d4c3dc7991 100644
--- a/include/fsl_sec.h
+++ b/include/fsl_sec.h
@@ -3,7 +3,7 @@
  * Common internal memory map for some Freescale SoCs
  *
  * Copyright 2014 Freescale Semiconductor, Inc.
- * Copyright 2018 NXP
+ * Copyright 2018, 2021 NXP
  */
 
 #ifndef __FSL_SEC_H
@@ -28,7 +28,17 @@
 #error Neither CONFIG_SYS_FSL_SEC_LE nor CONFIG_SYS_FSL_SEC_BE is defined
 #endif
 
+#define BLOB_OVERHEAD		(32 + 16)
 #define BLOB_SIZE(x)		((x) + 32 + 16) /* Blob buffer size */
+#define AES256_KEY_SZ		32
+
+#define NONCE_SIZE		6
+#define ICV_SIZE		6
+#define CCM_OVERHEAD		(NONCE_SIZE + ICV_SIZE)
+#define TAG_SIZE		20
+#define MAX_BLOB_SIZE		(AES256_KEY_SZ + CCM_OVERHEAD +\
+				BLOB_OVERHEAD + TAG_SIZE)
+#define SHA256_BYTES		32
 
 /* Security Engine Block (MS = Most Sig., LS = Least Sig.) */
 #if CONFIG_SYS_FSL_SEC_COMPAT >= 4
@@ -340,6 +350,11 @@ int sign_mppubk(const u8 *m, int data_size, u8 *dgst, u8 *c, u8 *d);
 int sec_init_idx(uint8_t);
 #endif
 int sec_init(void);
+
+int hash(u8 *msg, u32 msgsz, u8 *digest, u32 digest_sz);
+int aesecb_decrypt(u8 *key, u32 key_len, u8 *src, u8 *dst, u32 len);
+int ddek_black_blob(u8 *key_mod, u8 *src, u8 *dst, u32 len);
+int tag_black_obj(u8 *black_obj, size_t black_obj_len, size_t key_len, size_t black_max_len);
 #endif
 
 #endif /* __FSL_SEC_H */
-- 
2.17.1

