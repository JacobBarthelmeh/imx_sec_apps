# 1. Overview
This document explains how to use key provisioning command to generate black blob and store it in a file.

# 2. Prerequisites
- Secure mode on closed chip required.
- CSF unlocks access to MPPUBK (customer secret).

# 3. Build Uboot
build the uboot from here:https://source.codeaurora.org/external/imx/uboot-imx/commit/?h=rel_imx_5.4.70_2.3.0 .
- Tag: rel_imx_5.4.70_2.3.0
- Apply Uboot-key-provision-command.patch

## 3.1 Build Arm cross compiler toolchain(any other compatible toolchain can work)

```
$ wget https://developer.arm.com/-/media/Files/downloads/gnu-a/8.2-2019.01/gcc-arm-8.2-2019.01-x86_64-aarch64-elf.tar.xz
$ tar xf gcc-arm-8.2-2019.01-x86_64-aarch64-elf.tar.xz
```

## 3.2 Cross compile uboot-imx

- From the toolchain folder set up the environment:

```
$ export CROSS_COMPILE=<path to toolchain>/bin/aarch64-linux-gnu-
```
- Go to uboot-imx source folder and run:

```
$ make distclean
$ make imx8mm_evk_defconfig or make imx8mn_evk_defconfig
$ make
```

# 4. Usage

```
u-boot=> export_ddek_blob help
export_ddek_blob - Provision encrypted ddek as ddek black blob.

Usage:
export_ddek_blob src_addr dst_addr

 - src_addr: source addr which has encrypted DDEK(32 byte) to provision.
             must be 64 byte aligned.
 - dst_addr: destination addr which will have ddek black blob(112 byte).
             must be 64 byte aligned.
```

# 5. Run uboot generic key provisioning command

- Steps to generate black blob at uboot shell

```
1. Download Encrypted Key
   u-boot=> mw.b ${initrd_addr} 0 0x20
   u-boot=> tftp ${initrd_addr} enc_key.bin
   Note:
	a) key must have been encrypted using PKEK = SHA256(MPPUBK).
	b) Encryption algo for generating Encrypted key must be AES-256-ECB.
	c) Length of enc_key.bin must be 32 byte.
2. Decrypt encrypted key and create black blob.
   u-boot=> mw.b ${loadaddr} 0 0x70
   u-boot=> export_ddek_blob ${initrd_addr} ${loadaddr}
   Note: loadaddr will have the 112(0x70) byte long black blob.
3. Write black blob into file system
   u-boot=> fatwrite mmc ${mmcdev}:${mmcpart} ${loadaddr} black_blob.bin 0x70
```

# 6. Build and understand the usage of caam-decrypt application
Follow README of crypto_af_alg.
