commit eb718370ff0a3187397cc5faf1caa4bf638ad7ed
Author: Andreea Proca <andreea-brandusa.proca@nxp.com>
Date:   Fri Jan 31 20:09:30 2020 +0200

    Enable CAAM MP feature.

diff --git a/core/arch/arm/plat-imx/conf.mk b/core/arch/arm/plat-imx/conf.mk
index 7dd1d7e..ff97f4c 100644
--- a/core/arch/arm/plat-imx/conf.mk
+++ b/core/arch/arm/plat-imx/conf.mk
@@ -468,6 +468,12 @@ CFG_IMX_WDOG ?= y
 $(call force,CFG_IMX_OCRAM,y)
 endif
 
+# i.MX8MM specific config
+ifneq (,$(filter y, $(CFG_MX8MM)))
+#CFG_IMX_MP ?= y
+CFG_OCOTP_PTA = y
+endif
+
 ifeq ($(CFG_IMX_CAAM),y)
 # currently disable the use of CAAM in OP-TEE
 CFG_IMXCRYPT ?= n
diff --git a/core/arch/arm/plat-imx/crypto_conf.mk b/core/arch/arm/plat-imx/crypto_conf.mk
index e8b5aba..696105a 100644
--- a/core/arch/arm/plat-imx/crypto_conf.mk
+++ b/core/arch/arm/plat-imx/crypto_conf.mk
@@ -48,13 +48,21 @@ endif
 $(call force, CFG_CRYPTO_CMAC_HW,y)
 
 #
+# Force CFG_IMX_MP to n for platform not supported it
+#
+ifneq ($(filter y, $(CFG_MX6UL)$(CFG_MX7)$(CFG_MX7ULP)$(CFG_MX8M)$(CFG_MX8MM)),y)
+$(call force, CFG_IMX_MP,n)
+else
+CFG_IMX_MP = y
+endif
+#
 # Enable Manufacturing Protection if the platform support it
 # CFG_CRYPTO_MP_HW enables the manufacturing protection functionnalities
 # _CFG_CRYPTO_WITH_MP enables the generic crypto api
 # CFG_MANUFACT_PROTEC_PTA enables the MP PTA
 # CFG_MBEDTLS_MP enables the setting of the public key type
 #
-ifeq ($(filter y, $(CFG_MX6UL)$(CFG_MX7)), y)
+ifeq ($(CFG_IMX_MP),y)
 CFG_CRYPTO_MP_HW ?= y
 _CFG_CRYPTO_WITH_MP ?= y
 CFG_MANUFACT_PROTEC_PTA ?= y
diff --git a/core/arch/arm/plat-imx/pta/sub.mk b/core/arch/arm/plat-imx/pta/sub.mk
new file mode 100644
index 0000000..a5e8855
--- /dev/null
+++ b/core/arch/arm/plat-imx/pta/sub.mk
@@ -0,0 +1 @@
+srcs-$(CFG_MANUFACT_PROTEC_PTA) += pta_manufact_protec_mx.c
diff --git a/core/arch/arm/plat-imx/sub.mk b/core/arch/arm/plat-imx/sub.mk
index 8652890..ad1a935 100644
--- a/core/arch/arm/plat-imx/sub.mk
+++ b/core/arch/arm/plat-imx/sub.mk
@@ -29,9 +29,11 @@ srcs-$(CFG_DT) += imx_dt.c
 srcs-$(CFG_CSU) += imx_csu.c
 srcs-$(CFG_SCU) += imx_scu.c
 srcs-$(CFG_IMX_OCRAM) += imx_ocram.c
-srcs-$(CFG_MANUFACT_PROTEC_PTA) += pta/pta_manufact_protec_mx.c
 srcs-$(CFG_XRDC) += xrdc.c
 subdirs-$(CFG_PSCI_ARM32) += pm
 
 # Build the busfreq module
 subdirs-$(CFG_BUSFREQ) += busfreq
+
+# Build the imx-PTA
+subdirs-y += pta
diff --git a/core/drivers/caam/hal/common/hal_ctrl.c b/core/drivers/caam/hal/common/hal_ctrl.c
index 322d9a5..20baad4 100644
--- a/core/drivers/caam/hal/common/hal_ctrl.c
+++ b/core/drivers/caam/hal/common/hal_ctrl.c
@@ -1,6 +1,6 @@
 // SPDX-License-Identifier: BSD-2-Clause
 /**
- * @copyright 2018 NXP
+ * @copyright 2018-2019 NXP
  *
  * @file    hal_ctrl.c
  *
@@ -8,8 +8,8 @@
  *          Implementation of primitives to access HW
  */
 
-/* Global includes */
-#include <io.h>
+/* Local includes */
+#include "caam_io.h"
 
 #ifdef CFG_CRYPTO_HASH_HW
 /* Library i.MX includes */
@@ -20,8 +20,15 @@
 #include "hal_ctrl.h"
 
 /* Register includes */
+#include "ctrl_regs.h"
+
+/* Register includes */
 #include "version_regs.h"
 
+#include <trace.h>
+
+#define CHECK_MPPRIVK
+
 /**
  * @brief   Returns the number of Job Ring supported
  *
@@ -33,7 +40,7 @@ uint8_t hal_ctrl_jrnum(vaddr_t baseaddr)
 {
 	uint32_t val;
 
-	val = read32(baseaddr + CHANUM_MS);
+	val = get32(baseaddr + CHANUM_MS);
 
 	return GET_CHANUM_MS_JRNUM(val);
 }
@@ -52,11 +59,11 @@ int hal_ctrl_hash_limit(vaddr_t baseaddr)
 	uint32_t val;
 
 	/* Read the number of instance */
-	val = read32(baseaddr + CHANUM_LS);
+	val = get32(baseaddr + CHANUM_LS);
 
 	if (GET_CHANUM_LS_MDNUM(val)) {
 		/* Hashing is supported */
-		val = read32(baseaddr + CHAVID_LS);
+		val = get32(baseaddr + CHAVID_LS);
 		val &= BM_CHAVID_LS_MDVID;
 		if (val == CHAVID_LS_MDVID_LP256)
 			return HASH_SHA256;
@@ -81,7 +88,7 @@ bool hal_ctrl_splitkey(vaddr_t baseaddr)
 	uint32_t val;
 
 	/* Read the number of instance */
-	val = read32(baseaddr + CAAMVID_MS);
+	val = get32(baseaddr + CAAMVID_MS);
 
 	if (GET_CAAMVID_MS_MAJ_REV(val) < 3) {
 		return false;
@@ -104,9 +111,146 @@ uint8_t hal_ctrl_caam_era(vaddr_t baseaddr)
 	uint32_t val;
 
 	/* Read the number of instance */
-	val = read32(baseaddr + CCBVID);
+	val = get32(baseaddr + CCBVID);
 
 	return GET_CCBVID_CAAM_ERA(val);
 }
 #endif
 
+#ifdef CFG_CRYPTO_MP_HW
+
+/**
+ * @brief   Get the size in bytes of the MPMR\n
+ *          knowing that MPMR reigster is 8 bits.
+ *
+ * @retval MPMR_NB_REG   Size in bytes of the MPMR
+ */
+size_t hal_ctrl_get_mpmr_size(void)
+{
+	return MPMR_NB_REG;
+}
+
+/**
+ * @brief   Get the SCFGR content and check the MPCURVE fields
+ *
+ * @param[in] ctrl_addr  Controller base address
+ *
+ * @retval true       Success
+ * @retval false      Failure
+ */
+bool hal_ctrl_is_mpcurve(vaddr_t ctrl_addr __maybe_unused)
+{
+#ifdef CHECK_MPPRIVK
+	uint32_t val_scfgr;
+
+	/* get the SCFGR content */
+	val_scfgr = get32(ctrl_addr + SCFGR);
+	DMSG("val_scfgr = 0x%x", val_scfgr);
+
+	/**
+	 * check if the MPCURVE field value is 0
+	 * which means that the MP Private key has not been generated
+	 */
+	if (val_scfgr & BM_SCFGR_MPCURVE)
+		return true;
+
+#endif
+
+	/*
+	 * always return false to generate private key
+	 * even if the MPCURVE field is not clear
+	 */
+	return false;
+}
+
+/**
+ * @brief   Get the MPMR content
+ *
+ * @param[in] ctrl_addr  Controller base address
+ * @param[out] val_scfgr Value of the MPMR
+ */
+void hal_ctrl_get_mpmr(vaddr_t ctrl_addr, uint8_t *val_scfgr)
+{
+	int i;
+	uint32_t val;
+	/*
+     * get the SCFGR content
+     * Note that the MPMR endianess is reverted between write and read
+     */
+	for (i = 0; i < MPMR_NB_REG; i += 4) {
+		val = get32(ctrl_addr + MPMR + i);
+		val_scfgr[i]     = (uint8_t)((val >> 24) & 0xFF);
+		val_scfgr[i + 1] = (uint8_t)((val >> 16) & 0xFF);
+		val_scfgr[i + 2] = (uint8_t)((val >> 8) & 0xFF);
+		val_scfgr[i + 3] = (uint8_t)(val & 0xFF);
+	}
+
+}
+
+/**
+ * @brief   Fill the MPMR content then lock the register
+ *
+ * @param[in] ctrl_addr  Controller base address
+ * @param[in] msg_mpmr   Buffer with the message and length
+ *                       to fill the MPMR content
+ */
+void hal_ctrl_fill_mpmr(vaddr_t ctrl_addr, struct imxcrypt_buf *msg_mpmr)
+{
+	int i;
+	vaddr_t reg = ctrl_addr + MPMR;
+	bool is_filled = false;
+	uint32_t val = 0;
+	uint16_t min, remain;
+
+	/* check if the MPMR is filled */
+	if (get32(ctrl_addr + SCFGR) & BM_SCFGR_MPMRL)
+		is_filled = true;
+
+	DMSG("is_filled = %s", is_filled?"true":"false");
+
+	/* if the MPMR is not filled */
+	if (!is_filled) {
+		/*
+		 * find the min between the message length
+		 * and the MPMR_NB_REG
+		 */
+		min = MIN(msg_mpmr->length, (uint8_t)MPMR_NB_REG);
+		remain = min % 4;
+
+		/* fill the MPMR with the first entiere 32 bits value */
+		for (i = 0; i < (min-remain); i += 4, reg += 4) {
+			val = (msg_mpmr->data[i] |
+					(msg_mpmr->data[i + 1] << 8) |
+					(msg_mpmr->data[i + 2] << 16) |
+					(msg_mpmr->data[i + 3] << 24));
+			write32(val, reg);
+		}
+
+		if (remain) {
+			val = 0;
+			/*
+			 * fill the MPMR with the 8 bits values
+			 * until the end of the message length
+			 */
+			for (i = 0; i < remain; i++)
+				val |= (msg_mpmr->data[i] << (i*8));
+			write32(val, reg);
+			reg += 4;
+		}
+		/* fill the remain of the MPMR with 0 */
+		remain = MPMR_NB_REG - ROUNDUP(msg_mpmr->length, 4);
+		for (i = 0; i < (remain / 4); i++, reg += 4)
+			write32(0x0, reg);
+
+		/*
+		 * locks the MPMR for writing
+		 * remains locked until the next power-on session
+		 * set the MPMRL bit of SCFRG to 1
+		 */
+		write32((get32(ctrl_addr + SCFGR) | BM_SCFGR_MPMRL),
+			ctrl_addr + SCFGR);
+
+		DMSG("val_scfgr = 0x%x", get32(ctrl_addr + SCFGR));
+	}
+}
+#endif // CFG_CRYPTO_MP_HW
\ No newline at end of file
diff --git a/core/drivers/caam/hal/imx_6_7/hal_ctrl.c b/core/drivers/caam/hal/imx_6_7/hal_ctrl.c
index ae7fdbb..9457ad3 100644
--- a/core/drivers/caam/hal/imx_6_7/hal_ctrl.c
+++ b/core/drivers/caam/hal/imx_6_7/hal_ctrl.c
@@ -61,141 +61,3 @@ void hal_ctrl_init(vaddr_t baseaddr)
 
 	caam_pwr_add_backup(baseaddr, ctrl_backup, ARRAY_SIZE(ctrl_backup));
 }
-
-#ifdef CFG_CRYPTO_MP_HW
-
-/**
- * @brief   Get the size in bytes of the MPMR\n
- *          knowing that MPMR reigster is 8 bits.
- *
- * @retval MPMR_NB_REG   Size in bytes of the MPMR
- */
-size_t hal_ctrl_get_mpmr_size(void)
-{
-	return MPMR_NB_REG;
-}
-
-/**
- * @brief   Get the SCFGR content and check the MPCURVE fields
- *
- * @param[in] ctrl_addr  Controller base address
- *
- * @retval true       Success
- * @retval false      Failure
- */
-bool hal_ctrl_is_mpcurve(vaddr_t ctrl_addr __maybe_unused)
-{
-#ifdef CHECK_MPPRIVK
-	uint32_t val_scfgr;
-
-	/* get the SCFGR content */
-	val_scfgr = read32(ctrl_addr + SCFGR);
-	DMSG("val_scfgr = 0x%x", val_scfgr);
-
-	/**
-	 * check if the MPCURVE field value is 0
-	 * which means that the MP Private key has not been generated
-	 */
-	if (val_scfgr & BM_SCFGR_MPCURVE)
-		return true;
-
-#endif
-
-	/*
-	 * always return false to generate private key
-	 * even if the MPCURVE field is not clear
-	 */
-	return false;
-}
-
-/**
- * @brief   Get the MPMR content
- *
- * @param[in] ctrl_addr  Controller base address
- * @param[out] val_scfgr Value of the MPMR
- */
-void hal_ctrl_get_mpmr(vaddr_t ctrl_addr, uint8_t *val_scfgr)
-{
-	int i;
-	uint32_t val;
-	/*
-     * get the SCFGR content
-     * Note that the MPMR endianess is reverted between write and read
-     */
-	for (i = 0; i < MPMR_NB_REG; i += 4) {
-		val = read32(ctrl_addr + MPMR + i);
-		val_scfgr[i]     = (uint8_t)((val >> 24) & 0xFF);
-		val_scfgr[i + 1] = (uint8_t)((val >> 16) & 0xFF);
-		val_scfgr[i + 2] = (uint8_t)((val >> 8) & 0xFF);
-		val_scfgr[i + 3] = (uint8_t)(val & 0xFF);
-	}
-
-}
-
-/**
- * @brief   Fill the MPMR content then lock the register
- *
- * @param[in] ctrl_addr  Controller base address
- * @param[in] msg_mpmr   Buffer with the message and length
- *                       to fill the MPMR content
- */
-void hal_ctrl_fill_mpmr(vaddr_t ctrl_addr, struct imxcrypt_buf *msg_mpmr)
-{
-	int i;
-	vaddr_t reg = ctrl_addr + MPMR;
-	bool is_filled = false;
-	uint32_t val = 0;
-	uint16_t min, remain;
-
-	/* check if the MPMR is filled */
-	if (read32(ctrl_addr + SCFGR) & BM_SCFGR_MPMRL)
-		is_filled = true;
-
-	DMSG("is_filled = %s", is_filled?"true":"false");
-
-	/* if the MPMR is not filled */
-	if (!is_filled) {
-		/*
-		 * find the min between the message length
-		 * and the MPMR_NB_REG
-		 */
-		min = MIN(msg_mpmr->length, (uint8_t)MPMR_NB_REG);
-		remain = min % 4;
-
-		/* fill the MPMR with the first entiere 32 bits value */
-		for (i = 0; i < (min-remain); i += 4, reg += 4) {
-			val = (msg_mpmr->data[i] |
-					(msg_mpmr->data[i + 1] << 8) |
-					(msg_mpmr->data[i + 2] << 16) |
-					(msg_mpmr->data[i + 3] << 24));
-			write32(val, reg);
-		}
-
-		if (remain) {
-			val = 0;
-			/*
-			 * fill the MPMR with the 8 bits values
-			 * until the end of the message length
-			 */
-			for (i = 0; i < remain; i++)
-				val |= (msg_mpmr->data[i] << (i*8));
-			write32(val, reg);
-			reg += 4;
-		}
-		/* fill the remain of the MPMR with 0 */
-		remain = MPMR_NB_REG - ROUNDUP(msg_mpmr->length, 4);
-		for (i = 0; i < (remain / 4); i++, reg += 4)
-			write32(0x0, reg);
-
-		/*
-		 * locks the MPMR for writing
-		 * remains locked until the next power-on session
-		 * set the MPMRL bit of SCFRG to 1
-		 */
-		write32((read32(ctrl_addr + SCFGR) | BM_SCFGR_MPMRL),
-			ctrl_addr + SCFGR);
-
-		DMSG("val_scfgr = 0x%x", read32(ctrl_addr + SCFGR));
-	}
-}
-#endif // CFG_CRYPTO_MP_HW
diff --git a/core/drivers/caam/hal/imx_8m/registers/ctrl_regs.h b/core/drivers/caam/hal/imx_8m/registers/ctrl_regs.h
index e22cd05..e373494 100644
--- a/core/drivers/caam/hal/imx_8m/registers/ctrl_regs.h
+++ b/core/drivers/caam/hal/imx_8m/registers/ctrl_regs.h
@@ -31,5 +31,14 @@
 #define JRxDID_MS_PRIM_TZ			BIT32(4)
 #define JRxDID_MS_PRIM_DID(val)		SHIFT_U32((val & 0xF), 0)
 
+/* Security Configuration */
+#define SCFGR					0x000C
+#define BM_SCFGR_MPCURVE		SHIFT_U32(0xF, 28)
+#define BM_SCFGR_MPMRL          BIT32(26)
+
+/* Manufacturing Protection Message */
+#define MPMR					0x0380
+#define MPMR_NB_REG             0x20
+
 #endif /* __CTRL_REGS_H__ */
 
diff --git a/core/drivers/caam/include/caam_io.h b/core/drivers/caam/include/caam_io.h
new file mode 100644
index 0000000..3520e31
--- /dev/null
+++ b/core/drivers/caam/include/caam_io.h
@@ -0,0 +1,55 @@
+/* SPDX-License-Identifier: BSD-2-Clause */
+/**
+ * @copyright 2019 NXP
+ *
+ * @file    caam_io.h
+ *
+ * @brief   CAAM driver caam_io.h include file.\n
+ *          Macros for reading/writing CAAM registers
+ *          taking care of endianness.
+ */
+
+#ifndef __CAAM_IO_H__
+#define __CAAM_IO_H__
+
+#include <io.h>
+
+#define put_le64(a, v)		(*(volatile uint64_t *)(a) = (v))
+
+#define setbits_le32(a, v)      write32((vaddr_t)(a), read32((vaddr_t)(a)) | (v))
+#define clrbits_le32(a, c)      write32((vaddr_t)(a), read32((vaddr_t)(a)) & ~(c))
+#define clrsetbits_le32(a, c, s)        write32((vaddr_t)(a), (read32((vaddr_t)(a)) & ~(c)) | (s))
+
+#define setbits_be32(a, v)      put_be32((void *)(a), get_be32((void *)(a)) | (v))
+#define clrbits_be32(a, c)      put_be32((void *)(a), get_be32((void *)(a)) & ~(c))
+#define clrsetbits_be32(a, c, s)        put_be32((void *)(a), (get_be32((void *)(a)) & ~(c)) | (s))
+
+#ifdef CFG_NXP_SEC_BE
+#define get32(a)		get_be32((void *)(a))
+#define put32(a, v)		put_be32((void *)(a), v)
+#define get64(a)	(                                       \
+		((uint64_t)get32(a) << 32) |        \
+		(get32((uintptr_t)(a) + 4)))
+#define put64(a, v)	put_be64((void *)(a), v)
+#define mask32(a, v, mask) (		\
+	put32(a, (get32(a) & ~mask) | (v & mask)))
+#else
+#define get32(a)		read32((vaddr_t)(a))
+#define put32(a, v)		write32(v, (vaddr_t)(a))
+#define get64(a)	(                                       \
+		((uint64_t)get32((uintptr_t)(a) + 4) << 32) |    \
+		(get32(a)))
+#define put64(a, v)	put_le64(a, v)
+#define mask32(a, v, mask) (		\
+	put32(a, (get32(a) & ~mask) | (v & mask)))
+#endif
+
+#ifdef	CFG_PHYS_64BIT
+#define sec_read_addr(a)	get64(a)
+#define sec_write_addr(a, v)    put64(a, v)
+#else
+#define sec_read_addr(a)	get32(a)
+#define sec_write_addr(a, v)    put32(a, v)
+#endif
+
+#endif /* __CAAM_IO_H__ */
\ No newline at end of file
diff --git a/manprot_commit.patch b/manprot_commit.patch
new file mode 100644
index 0000000..e88ad01
--- /dev/null
+++ b/manprot_commit.patch
@@ -0,0 +1,459 @@
+commit 06d9c3207f53615b00a9c0ae10ec3eeb82bf9f02
+Author: Andreea Proca <andreea-brandusa.proca@nxp.com>
+Date:   Fri Jan 31 19:51:11 2020 +0200
+
+    Enable CAAM MP feature.
+
+diff --git a/core/arch/arm/plat-imx/conf.mk b/core/arch/arm/plat-imx/conf.mk
+index 7dd1d7e..ff97f4c 100644
+--- a/core/arch/arm/plat-imx/conf.mk
++++ b/core/arch/arm/plat-imx/conf.mk
+@@ -468,6 +468,12 @@ CFG_IMX_WDOG ?= y
+ $(call force,CFG_IMX_OCRAM,y)
+ endif
+ 
++# i.MX8MM specific config
++ifneq (,$(filter y, $(CFG_MX8MM)))
++#CFG_IMX_MP ?= y
++CFG_OCOTP_PTA = y
++endif
++
+ ifeq ($(CFG_IMX_CAAM),y)
+ # currently disable the use of CAAM in OP-TEE
+ CFG_IMXCRYPT ?= n
+diff --git a/core/arch/arm/plat-imx/crypto_conf.mk b/core/arch/arm/plat-imx/crypto_conf.mk
+index e8b5aba..696105a 100644
+--- a/core/arch/arm/plat-imx/crypto_conf.mk
++++ b/core/arch/arm/plat-imx/crypto_conf.mk
+@@ -48,13 +48,21 @@ endif
+ $(call force, CFG_CRYPTO_CMAC_HW,y)
+ 
+ #
++# Force CFG_IMX_MP to n for platform not supported it
++#
++ifneq ($(filter y, $(CFG_MX6UL)$(CFG_MX7)$(CFG_MX7ULP)$(CFG_MX8M)$(CFG_MX8MM)),y)
++$(call force, CFG_IMX_MP,n)
++else
++CFG_IMX_MP = y
++endif
++#
+ # Enable Manufacturing Protection if the platform support it
+ # CFG_CRYPTO_MP_HW enables the manufacturing protection functionnalities
+ # _CFG_CRYPTO_WITH_MP enables the generic crypto api
+ # CFG_MANUFACT_PROTEC_PTA enables the MP PTA
+ # CFG_MBEDTLS_MP enables the setting of the public key type
+ #
+-ifeq ($(filter y, $(CFG_MX6UL)$(CFG_MX7)), y)
++ifeq ($(CFG_IMX_MP),y)
+ CFG_CRYPTO_MP_HW ?= y
+ _CFG_CRYPTO_WITH_MP ?= y
+ CFG_MANUFACT_PROTEC_PTA ?= y
+diff --git a/core/arch/arm/plat-imx/pta/sub.mk b/core/arch/arm/plat-imx/pta/sub.mk
+new file mode 100644
+index 0000000..a5e8855
+--- /dev/null
++++ b/core/arch/arm/plat-imx/pta/sub.mk
+@@ -0,0 +1 @@
++srcs-$(CFG_MANUFACT_PROTEC_PTA) += pta_manufact_protec_mx.c
+diff --git a/core/arch/arm/plat-imx/sub.mk b/core/arch/arm/plat-imx/sub.mk
+index 8652890..ad1a935 100644
+--- a/core/arch/arm/plat-imx/sub.mk
++++ b/core/arch/arm/plat-imx/sub.mk
+@@ -29,9 +29,11 @@ srcs-$(CFG_DT) += imx_dt.c
+ srcs-$(CFG_CSU) += imx_csu.c
+ srcs-$(CFG_SCU) += imx_scu.c
+ srcs-$(CFG_IMX_OCRAM) += imx_ocram.c
+-srcs-$(CFG_MANUFACT_PROTEC_PTA) += pta/pta_manufact_protec_mx.c
+ srcs-$(CFG_XRDC) += xrdc.c
+ subdirs-$(CFG_PSCI_ARM32) += pm
+ 
+ # Build the busfreq module
+ subdirs-$(CFG_BUSFREQ) += busfreq
++
++# Build the imx-PTA
++subdirs-y += pta
+diff --git a/core/drivers/caam/hal/common/hal_ctrl.c b/core/drivers/caam/hal/common/hal_ctrl.c
+index 322d9a5..20baad4 100644
+--- a/core/drivers/caam/hal/common/hal_ctrl.c
++++ b/core/drivers/caam/hal/common/hal_ctrl.c
+@@ -1,6 +1,6 @@
+ // SPDX-License-Identifier: BSD-2-Clause
+ /**
+- * @copyright 2018 NXP
++ * @copyright 2018-2019 NXP
+  *
+  * @file    hal_ctrl.c
+  *
+@@ -8,8 +8,8 @@
+  *          Implementation of primitives to access HW
+  */
+ 
+-/* Global includes */
+-#include <io.h>
++/* Local includes */
++#include "caam_io.h"
+ 
+ #ifdef CFG_CRYPTO_HASH_HW
+ /* Library i.MX includes */
+@@ -20,8 +20,15 @@
+ #include "hal_ctrl.h"
+ 
+ /* Register includes */
++#include "ctrl_regs.h"
++
++/* Register includes */
+ #include "version_regs.h"
+ 
++#include <trace.h>
++
++#define CHECK_MPPRIVK
++
+ /**
+  * @brief   Returns the number of Job Ring supported
+  *
+@@ -33,7 +40,7 @@ uint8_t hal_ctrl_jrnum(vaddr_t baseaddr)
+ {
+ 	uint32_t val;
+ 
+-	val = read32(baseaddr + CHANUM_MS);
++	val = get32(baseaddr + CHANUM_MS);
+ 
+ 	return GET_CHANUM_MS_JRNUM(val);
+ }
+@@ -52,11 +59,11 @@ int hal_ctrl_hash_limit(vaddr_t baseaddr)
+ 	uint32_t val;
+ 
+ 	/* Read the number of instance */
+-	val = read32(baseaddr + CHANUM_LS);
++	val = get32(baseaddr + CHANUM_LS);
+ 
+ 	if (GET_CHANUM_LS_MDNUM(val)) {
+ 		/* Hashing is supported */
+-		val = read32(baseaddr + CHAVID_LS);
++		val = get32(baseaddr + CHAVID_LS);
+ 		val &= BM_CHAVID_LS_MDVID;
+ 		if (val == CHAVID_LS_MDVID_LP256)
+ 			return HASH_SHA256;
+@@ -81,7 +88,7 @@ bool hal_ctrl_splitkey(vaddr_t baseaddr)
+ 	uint32_t val;
+ 
+ 	/* Read the number of instance */
+-	val = read32(baseaddr + CAAMVID_MS);
++	val = get32(baseaddr + CAAMVID_MS);
+ 
+ 	if (GET_CAAMVID_MS_MAJ_REV(val) < 3) {
+ 		return false;
+@@ -104,9 +111,146 @@ uint8_t hal_ctrl_caam_era(vaddr_t baseaddr)
+ 	uint32_t val;
+ 
+ 	/* Read the number of instance */
+-	val = read32(baseaddr + CCBVID);
++	val = get32(baseaddr + CCBVID);
+ 
+ 	return GET_CCBVID_CAAM_ERA(val);
+ }
+ #endif
+ 
++#ifdef CFG_CRYPTO_MP_HW
++
++/**
++ * @brief   Get the size in bytes of the MPMR\n
++ *          knowing that MPMR reigster is 8 bits.
++ *
++ * @retval MPMR_NB_REG   Size in bytes of the MPMR
++ */
++size_t hal_ctrl_get_mpmr_size(void)
++{
++	return MPMR_NB_REG;
++}
++
++/**
++ * @brief   Get the SCFGR content and check the MPCURVE fields
++ *
++ * @param[in] ctrl_addr  Controller base address
++ *
++ * @retval true       Success
++ * @retval false      Failure
++ */
++bool hal_ctrl_is_mpcurve(vaddr_t ctrl_addr __maybe_unused)
++{
++#ifdef CHECK_MPPRIVK
++	uint32_t val_scfgr;
++
++	/* get the SCFGR content */
++	val_scfgr = get32(ctrl_addr + SCFGR);
++	DMSG("val_scfgr = 0x%x", val_scfgr);
++
++	/**
++	 * check if the MPCURVE field value is 0
++	 * which means that the MP Private key has not been generated
++	 */
++	if (val_scfgr & BM_SCFGR_MPCURVE)
++		return true;
++
++#endif
++
++	/*
++	 * always return false to generate private key
++	 * even if the MPCURVE field is not clear
++	 */
++	return false;
++}
++
++/**
++ * @brief   Get the MPMR content
++ *
++ * @param[in] ctrl_addr  Controller base address
++ * @param[out] val_scfgr Value of the MPMR
++ */
++void hal_ctrl_get_mpmr(vaddr_t ctrl_addr, uint8_t *val_scfgr)
++{
++	int i;
++	uint32_t val;
++	/*
++     * get the SCFGR content
++     * Note that the MPMR endianess is reverted between write and read
++     */
++	for (i = 0; i < MPMR_NB_REG; i += 4) {
++		val = get32(ctrl_addr + MPMR + i);
++		val_scfgr[i]     = (uint8_t)((val >> 24) & 0xFF);
++		val_scfgr[i + 1] = (uint8_t)((val >> 16) & 0xFF);
++		val_scfgr[i + 2] = (uint8_t)((val >> 8) & 0xFF);
++		val_scfgr[i + 3] = (uint8_t)(val & 0xFF);
++	}
++
++}
++
++/**
++ * @brief   Fill the MPMR content then lock the register
++ *
++ * @param[in] ctrl_addr  Controller base address
++ * @param[in] msg_mpmr   Buffer with the message and length
++ *                       to fill the MPMR content
++ */
++void hal_ctrl_fill_mpmr(vaddr_t ctrl_addr, struct imxcrypt_buf *msg_mpmr)
++{
++	int i;
++	vaddr_t reg = ctrl_addr + MPMR;
++	bool is_filled = false;
++	uint32_t val = 0;
++	uint16_t min, remain;
++
++	/* check if the MPMR is filled */
++	if (get32(ctrl_addr + SCFGR) & BM_SCFGR_MPMRL)
++		is_filled = true;
++
++	DMSG("is_filled = %s", is_filled?"true":"false");
++
++	/* if the MPMR is not filled */
++	if (!is_filled) {
++		/*
++		 * find the min between the message length
++		 * and the MPMR_NB_REG
++		 */
++		min = MIN(msg_mpmr->length, (uint8_t)MPMR_NB_REG);
++		remain = min % 4;
++
++		/* fill the MPMR with the first entiere 32 bits value */
++		for (i = 0; i < (min-remain); i += 4, reg += 4) {
++			val = (msg_mpmr->data[i] |
++					(msg_mpmr->data[i + 1] << 8) |
++					(msg_mpmr->data[i + 2] << 16) |
++					(msg_mpmr->data[i + 3] << 24));
++			write32(val, reg);
++		}
++
++		if (remain) {
++			val = 0;
++			/*
++			 * fill the MPMR with the 8 bits values
++			 * until the end of the message length
++			 */
++			for (i = 0; i < remain; i++)
++				val |= (msg_mpmr->data[i] << (i*8));
++			write32(val, reg);
++			reg += 4;
++		}
++		/* fill the remain of the MPMR with 0 */
++		remain = MPMR_NB_REG - ROUNDUP(msg_mpmr->length, 4);
++		for (i = 0; i < (remain / 4); i++, reg += 4)
++			write32(0x0, reg);
++
++		/*
++		 * locks the MPMR for writing
++		 * remains locked until the next power-on session
++		 * set the MPMRL bit of SCFRG to 1
++		 */
++		write32((get32(ctrl_addr + SCFGR) | BM_SCFGR_MPMRL),
++			ctrl_addr + SCFGR);
++
++		DMSG("val_scfgr = 0x%x", get32(ctrl_addr + SCFGR));
++	}
++}
++#endif // CFG_CRYPTO_MP_HW
+\ No newline at end of file
+diff --git a/core/drivers/caam/hal/imx_6_7/hal_ctrl.c b/core/drivers/caam/hal/imx_6_7/hal_ctrl.c
+index ae7fdbb..9457ad3 100644
+--- a/core/drivers/caam/hal/imx_6_7/hal_ctrl.c
++++ b/core/drivers/caam/hal/imx_6_7/hal_ctrl.c
+@@ -61,141 +61,3 @@ void hal_ctrl_init(vaddr_t baseaddr)
+ 
+ 	caam_pwr_add_backup(baseaddr, ctrl_backup, ARRAY_SIZE(ctrl_backup));
+ }
+-
+-#ifdef CFG_CRYPTO_MP_HW
+-
+-/**
+- * @brief   Get the size in bytes of the MPMR\n
+- *          knowing that MPMR reigster is 8 bits.
+- *
+- * @retval MPMR_NB_REG   Size in bytes of the MPMR
+- */
+-size_t hal_ctrl_get_mpmr_size(void)
+-{
+-	return MPMR_NB_REG;
+-}
+-
+-/**
+- * @brief   Get the SCFGR content and check the MPCURVE fields
+- *
+- * @param[in] ctrl_addr  Controller base address
+- *
+- * @retval true       Success
+- * @retval false      Failure
+- */
+-bool hal_ctrl_is_mpcurve(vaddr_t ctrl_addr __maybe_unused)
+-{
+-#ifdef CHECK_MPPRIVK
+-	uint32_t val_scfgr;
+-
+-	/* get the SCFGR content */
+-	val_scfgr = read32(ctrl_addr + SCFGR);
+-	DMSG("val_scfgr = 0x%x", val_scfgr);
+-
+-	/**
+-	 * check if the MPCURVE field value is 0
+-	 * which means that the MP Private key has not been generated
+-	 */
+-	if (val_scfgr & BM_SCFGR_MPCURVE)
+-		return true;
+-
+-#endif
+-
+-	/*
+-	 * always return false to generate private key
+-	 * even if the MPCURVE field is not clear
+-	 */
+-	return false;
+-}
+-
+-/**
+- * @brief   Get the MPMR content
+- *
+- * @param[in] ctrl_addr  Controller base address
+- * @param[out] val_scfgr Value of the MPMR
+- */
+-void hal_ctrl_get_mpmr(vaddr_t ctrl_addr, uint8_t *val_scfgr)
+-{
+-	int i;
+-	uint32_t val;
+-	/*
+-     * get the SCFGR content
+-     * Note that the MPMR endianess is reverted between write and read
+-     */
+-	for (i = 0; i < MPMR_NB_REG; i += 4) {
+-		val = read32(ctrl_addr + MPMR + i);
+-		val_scfgr[i]     = (uint8_t)((val >> 24) & 0xFF);
+-		val_scfgr[i + 1] = (uint8_t)((val >> 16) & 0xFF);
+-		val_scfgr[i + 2] = (uint8_t)((val >> 8) & 0xFF);
+-		val_scfgr[i + 3] = (uint8_t)(val & 0xFF);
+-	}
+-
+-}
+-
+-/**
+- * @brief   Fill the MPMR content then lock the register
+- *
+- * @param[in] ctrl_addr  Controller base address
+- * @param[in] msg_mpmr   Buffer with the message and length
+- *                       to fill the MPMR content
+- */
+-void hal_ctrl_fill_mpmr(vaddr_t ctrl_addr, struct imxcrypt_buf *msg_mpmr)
+-{
+-	int i;
+-	vaddr_t reg = ctrl_addr + MPMR;
+-	bool is_filled = false;
+-	uint32_t val = 0;
+-	uint16_t min, remain;
+-
+-	/* check if the MPMR is filled */
+-	if (read32(ctrl_addr + SCFGR) & BM_SCFGR_MPMRL)
+-		is_filled = true;
+-
+-	DMSG("is_filled = %s", is_filled?"true":"false");
+-
+-	/* if the MPMR is not filled */
+-	if (!is_filled) {
+-		/*
+-		 * find the min between the message length
+-		 * and the MPMR_NB_REG
+-		 */
+-		min = MIN(msg_mpmr->length, (uint8_t)MPMR_NB_REG);
+-		remain = min % 4;
+-
+-		/* fill the MPMR with the first entiere 32 bits value */
+-		for (i = 0; i < (min-remain); i += 4, reg += 4) {
+-			val = (msg_mpmr->data[i] |
+-					(msg_mpmr->data[i + 1] << 8) |
+-					(msg_mpmr->data[i + 2] << 16) |
+-					(msg_mpmr->data[i + 3] << 24));
+-			write32(val, reg);
+-		}
+-
+-		if (remain) {
+-			val = 0;
+-			/*
+-			 * fill the MPMR with the 8 bits values
+-			 * until the end of the message length
+-			 */
+-			for (i = 0; i < remain; i++)
+-				val |= (msg_mpmr->data[i] << (i*8));
+-			write32(val, reg);
+-			reg += 4;
+-		}
+-		/* fill the remain of the MPMR with 0 */
+-		remain = MPMR_NB_REG - ROUNDUP(msg_mpmr->length, 4);
+-		for (i = 0; i < (remain / 4); i++, reg += 4)
+-			write32(0x0, reg);
+-
+-		/*
+-		 * locks the MPMR for writing
+-		 * remains locked until the next power-on session
+-		 * set the MPMRL bit of SCFRG to 1
+-		 */
+-		write32((read32(ctrl_addr + SCFGR) | BM_SCFGR_MPMRL),
+-			ctrl_addr + SCFGR);
+-
+-		DMSG("val_scfgr = 0x%x", read32(ctrl_addr + SCFGR));
+-	}
+-}
+-#endif // CFG_CRYPTO_MP_HW
+diff --git a/core/drivers/caam/hal/imx_8m/registers/ctrl_regs.h b/core/drivers/caam/hal/imx_8m/registers/ctrl_regs.h
+index e22cd05..e373494 100644
+--- a/core/drivers/caam/hal/imx_8m/registers/ctrl_regs.h
++++ b/core/drivers/caam/hal/imx_8m/registers/ctrl_regs.h
+@@ -31,5 +31,14 @@
+ #define JRxDID_MS_PRIM_TZ			BIT32(4)
+ #define JRxDID_MS_PRIM_DID(val)		SHIFT_U32((val & 0xF), 0)
+ 
++/* Security Configuration */
++#define SCFGR					0x000C
++#define BM_SCFGR_MPCURVE		SHIFT_U32(0xF, 28)
++#define BM_SCFGR_MPMRL          BIT32(26)
++
++/* Manufacturing Protection Message */
++#define MPMR					0x0380
++#define MPMR_NB_REG             0x20
++
+ #endif /* __CTRL_REGS_H__ */
+ 
