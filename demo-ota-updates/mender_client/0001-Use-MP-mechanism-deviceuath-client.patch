diff --git a/auth.go b/auth.go
index 2fc1dc4..6029a2e 100644
--- a/auth.go
+++ b/auth.go
@@ -16,6 +16,9 @@ package main
 import (
 	"os"
 	"strings"
+	"bytes"
+	"strconv"
+	"os/exec"
 
 	"github.com/mendersoftware/log"
 	"github.com/mendersoftware/mender/client"
@@ -41,6 +44,10 @@ type AuthManager interface {
 
 const (
 	noAuthToken = client.EmptyAuthToken
+
+	key_path = "/data/mender/mp.pem"
+	blob_path = "/data/mender/mp.pemblob"
+	der_signature_path = "/data/mender/signature.der"
 )
 
 type MenderAuthManager struct {
@@ -99,6 +106,8 @@ func (m *MenderAuthManager) IsAuthorized() bool {
 func (m *MenderAuthManager) MakeAuthRequest() (*client.AuthRequest, error) {
 
 	var err error
+	var args []string
+
 	authd := client.AuthReqData{}
 
 	idata, err := m.idSrc.Get()
@@ -109,18 +118,35 @@ func (m *MenderAuthManager) MakeAuthRequest() (*client.AuthRequest, error) {
 	authd.IdData = idata
 
 	// fill device public key
-	authd.Pubkey, err = m.keyStore.PublicPEM()
+	if (fileExists(blob_path) == false){
+		args := []string{"mppubk", key_path}
+		ret_c, err := run_cmd("secureota", args)
+		if (ret_c == -1) {
+			return nil, errors.Wrapf(err, "failed to obtain device public key from OPTEE")
+		}
+	}
+	args = []string{"decapblob", blob_path, key_path}
+	ret_c, err := run_cmd("secureota", args)
+        if (ret_c == -1) {
+                return nil, errors.Wrapf(err, "failed to obtain device public key from OPTEE")
+        }
+
+	authd.Pubkey, err = m.keyStore.LoadPublicKey(key_path)
 	if err != nil {
 		return nil, errors.Wrapf(err, "failed to obtain device public key")
 	}
 
-	tentok := strings.TrimSpace(string(m.tenantToken))
+        //delete pem encoded key as it is saved in a blob
+        err = os.Remove(key_path)
+        if err != nil {
+                log.Debugf("failed to delete key pem file!\n")
+        }
 
+	// fill tenant token
+	tentok := strings.TrimSpace(string(m.tenantToken))
 	log.Debugf("tenant token: %s", tentok)
 
-	// fill tenant token
 	authd.TenantToken = string(tentok)
-
 	log.Debugf("authorization data: %v", authd)
 
 	reqdata, err := authd.ToBytes()
@@ -129,7 +155,12 @@ func (m *MenderAuthManager) MakeAuthRequest() (*client.AuthRequest, error) {
 	}
 
 	// generate signature
-	sig, err := m.keyStore.Sign(reqdata)
+	args = []string{"signmpprivk", authd.TenantToken, der_signature_path}
+	sigSize, err := run_cmd("secureota", args)
+	if (sigSize == -1 || err != nil) {
+		return nil, errors.Wrapf(err, "failed to sign auth request in OPTEE")
+	}
+	sig, err := m.keyStore.LoadSignature(sigSize, der_signature_path)
 	if err != nil {
 		return nil, errors.Wrapf(err, "failed to sign auth request")
 	}
@@ -188,3 +219,25 @@ func (m *MenderAuthManager) GenerateKey() error {
 	}
 	return nil
 }
+
+func fileExists(name string) bool {
+    if _, err := os.Stat(name); err != nil {
+        if os.IsNotExist(err) {
+            return false
+        }
+    }
+    return true
+}
+
+func run_cmd(script string, args []string) (int, error) {
+	var cmd *exec.Cmd
+	cmd = exec.Command(script, args...)
+
+    var stdout, stderr bytes.Buffer
+    cmd.Stdout = &stdout
+    cmd.Stderr = &stderr
+    cmd.Run()
+	outStr := string(stdout.Bytes())
+
+    return strconv.Atoi(string(outStr))
+}
diff --git a/store/keystore.go b/store/keystore.go
index 779d718..b74cb67 100644
--- a/store/keystore.go
+++ b/store/keystore.go
@@ -150,6 +150,16 @@ func (k *Keystore) PublicPEM() (string, error) {
 	return buf.String(), nil
 }
 
+func (k *Keystore) LoadPublicKey(key_path string) (string, error) {
+
+	publicKey, err := ioutil.ReadFile(key_path)
+	if err != nil {
+		log.Fatal(errors.New("Can not load public key"))
+	}
+	trimpublicKey := bytes.Trim(publicKey, "\x00")
+	return string(trimpublicKey), nil
+}
+
 func (k *Keystore) Sign(data []byte) ([]byte, error) {
 	hash := crypto.SHA256
 	h := hash.New()
@@ -184,6 +194,20 @@ func loadFromPem(in io.Reader) (*rsa.PrivateKey, error) {
 	return key, nil
 }
 
+func (k *Keystore) LoadSignature(sigSize int, signature_path string) ([]byte, error) {
+	der := make([]byte, sigSize)
+
+	file, err := os.Open(signature_path)
+	if err != nil {
+		return nil, errors.New("Error while opening file")
+	}
+	_, err = file.Read(der)
+	if err != nil {
+		log.Fatal(err)
+	}
+	return der, nil
+}
+
 func saveToPem(out io.Writer, key *rsa.PrivateKey) error {
 	data := x509.MarshalPKCS1PrivateKey(key)
 
