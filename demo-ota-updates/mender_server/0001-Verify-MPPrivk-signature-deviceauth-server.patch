commit 119c4b1b42b2530a5af43d0b6c7c0e91e9edc401
Author: Andreea Proca <andreea-brandusa.proca@nxp.com>
Date:   Fri Jan 31 16:18:23 2020 +0200

    Add support for signature verification using the signature and
    the Manufacturing Protection Public key received from the client.

diff --git a/api/http/api_devauth.go b/api/http/api_devauth.go
index df9371d..2b18820 100644
--- a/api/http/api_devauth.go
+++ b/api/http/api_devauth.go
@@ -152,8 +152,7 @@ func (d *DevAuthApiHandlers) SubmitAuthRequestHandler(w rest.ResponseWriter, r *
 		rest_utils.RestErrWithLog(w, r, l, errors.New("missing request signature header"), http.StatusBadRequest)
 		return
 	}
-
-	err = utils.VerifyAuthReqSign(signature, authreq.PubKeyStruct, body)
+	err = utils.ValidateSign(signature, authreq.PubKeyStruct, authreq.TenantToken)
 	if err != nil {
 		rest_utils.RestErrWithLogMsg(w, r, l, err, http.StatusUnauthorized, "signature verification failed")
 		return
diff --git a/model/authreq.go b/model/authreq.go
index f97f97b..a551fa0 100644
--- a/model/authreq.go
+++ b/model/authreq.go
@@ -14,7 +14,7 @@
 package model
 
 import (
-	"crypto/rsa"
+	"crypto/ecdsa"
 	"errors"
 
 	"github.com/mendersoftware/deviceauth/utils"
@@ -28,7 +28,7 @@ type AuthReq struct {
 	PubKey      string `json:"pubkey"`
 
 	//helpers, not serialized
-	PubKeyStruct *rsa.PublicKey `json:"-" bson:"-"`
+	PubKeyStruct *ecdsa.PublicKey `json:"-" bson:"-"`
 }
 
 func (r *AuthReq) Validate() error {
@@ -47,7 +47,7 @@ func (r *AuthReq) Validate() error {
 		return err
 	}
 
-	keyStruct, ok := key.(*rsa.PublicKey)
+	keyStruct, ok := key.(*ecdsa.PublicKey)
 	if !ok {
 		return errors.New("cannot decode public key")
 	}
diff --git a/utils/crypto.go b/utils/crypto.go
index 1b602fd..03a59c4 100644
--- a/utils/crypto.go
+++ b/utils/crypto.go
@@ -14,6 +14,7 @@
 package utils
 
 import (
+	"fmt"
 	"bytes"
 	"crypto"
 	"crypto/dsa"
@@ -22,7 +23,10 @@ import (
 	"crypto/sha256"
 	"crypto/x509"
 	"encoding/base64"
+	"strings"
+	"encoding/asn1"
 	"encoding/pem"
+	"math/big"
 
 	"github.com/pkg/errors"
 )
@@ -35,6 +39,73 @@ const (
 	PubKeyBlockType = "PUBLIC KEY"
 )
 
+type ECDSASignature struct {
+    R, S *big.Int
+}
+
+func hash(b []byte) []uint8 {
+    h := sha256.New()
+    // hash the body bytes
+    h.Write(b)
+    // compute the SHA256 hash
+    return h.Sum(nil)
+}
+
+// Decode JWT specific base64url encoding with padding stripped
+func DecodeSegment(seg string) ([]byte, error) {
+	if l := len(seg) % 4; l > 0 {
+		seg += strings.Repeat("=", 4-l)
+	}
+
+	return base64.StdEncoding.DecodeString(seg)
+}
+
+func ValidateSign(signature string, pubkey interface{}, content string) error {
+        mpmr := []uint8 { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
+	var sig []byte
+
+	sig, err := DecodeSegment(signature)
+	if err != nil {
+		return err
+	}
+
+	key, ok := pubkey.(*ecdsa.PublicKey)
+	if !ok {
+		return errors.New("could not extract key")
+	}
+	s := &ECDSASignature{}
+	_, err = asn1.Unmarshal(sig, s)
+	if err != nil {
+		return errors.Wrap(err, ErrMsgVerify)
+	}
+
+	bmsg_len := len(content)/2;
+	bmsg := make([]uint8, bmsg_len)
+	for i := 0; i < bmsg_len; i++ {
+		fmt.Sscanf(string(content[2*i]), "%02x", &bmsg[i])
+	}
+
+	msg_mpmr_len := 32 + bmsg_len
+	msg_mpmr := make([]uint8, 0, msg_mpmr_len)
+	msg_mpmr = append(mpmr, bmsg...)
+
+        // compute the SHA256 hash of our message
+	h := hash(msg_mpmr)
+
+	// validate the signature!
+	if verifystatus := ecdsa.Verify(key, h, s.R, s.S); verifystatus == true {
+		return nil
+	} else {
+		return errors.New("could not vrifyy signature")
+	}
+
+    // signature is valid
+    return nil
+}
+
 func VerifyAuthReqSign(signature string, pubkey interface{}, content []byte) error {
 	hash := sha256.New()
 	_, err := bytes.NewReader(content).WriteTo(hash)
