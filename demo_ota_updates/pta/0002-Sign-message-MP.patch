commit 13d96d6c3be0105b3d7b35810063aea22ad146ec
Author: Andreea Proca <andreea-brandusa.proca@nxp.com>
Date:   Wed Dec 11 21:38:08 2019 +0200

    Add support for signing a string using Manufacturing Protection
    Private key.

diff --git a/core/arch/arm/plat-imx/pta/pta_manufact_protec_mx.c b/core/arch/arm/plat-imx/pta/pta_manufact_protec_mx.c
index 0249cb8..b1515a9 100644
--- a/core/arch/arm/plat-imx/pta/pta_manufact_protec_mx.c
+++ b/core/arch/arm/plat-imx/pta/pta_manufact_protec_mx.c
@@ -113,6 +113,42 @@ out:
 	return res;
 }
 
+static TEE_Result mpsignstring(void *cert, size_t len, void *signature, size_t len_sig)
+{
+	struct imxcrypt_mp_sign sdata;
+	TEE_Result res = TEE_ERROR_GENERIC;
+
+	DMSG("MPSign function\n");
+
+	/* MP Signature structure */
+	sdata.message.data = (uint8_t *)cert;
+	sdata.message.length = len;
+	sdata.signature.data = (uint8_t *)signature;
+	sdata.signature.length = SIGNATURE_SIZE;
+
+	sdata.signature.data = malloc(sdata.signature.length);
+	if (!sdata.signature.data) {
+		EMSG("malloc failed\n");
+		res = TEE_ERROR_OUT_OF_MEMORY;
+		goto out;
+	}
+	memset(sdata.signature.data, 0, sdata.signature.length);
+
+	/* mpsign */
+	res = crypto_mp_sign(&sdata);
+	if (res != TEE_SUCCESS) {
+		EMSG("crypto_mp_sign failed with code 0x%x\n", res);
+		goto out;
+	}
+
+	memset(signature, 0, sdata.signature.length);
+	memcpy(signature, sdata.signature.data, sdata.signature.length);
+
+out:
+	free(sdata.signature.data);
+	return res;
+}
+
 /**
  * @brief   Get MPMR content\n
  *          (Manufacturing Protection message register)\n
@@ -134,7 +170,8 @@ static TEE_Result mpmr_content(struct imxcrypt_buf *mpmr_reg)
 	res = crypto_mp_export_mpmr(mpmr_reg);
 	if (res != TEE_SUCCESS)
 		EMSG("crypto_mp_export_mpmr failed with code 0x%x\n", res);
-
+	else
+		DMSG("mpmr_content TEE_SUCCESS\n");
 	return res;
 }
 
@@ -224,6 +261,44 @@ static TEE_Result certificate_signature(uint32_t type,
 	return res;
 }
 
+
+static TEE_Result mp_signature(uint32_t type,
+	TEE_Param params[TEE_NUM_PARAMS])
+{
+	TEE_Result res = TEE_ERROR_GENERIC;
+	struct imxcrypt_buf mpmr_reg;
+	uint32_t exp_param_types;
+
+	exp_param_types = TEE_PARAM_TYPES(TEE_PARAM_TYPE_MEMREF_INPUT,
+					TEE_PARAM_TYPE_MEMREF_OUTPUT,
+					TEE_PARAM_TYPE_MEMREF_OUTPUT,
+					TEE_PARAM_TYPE_NONE);
+
+	if (type != exp_param_types)
+		return TEE_ERROR_BAD_PARAMETERS;
+
+	/* mpsign */
+	res = mpsignstring(params[0].memref.buffer, params[0].memref.size, params[1].memref.buffer,
+		SIGNATURE_SIZE);
+	if (res != TEE_SUCCESS) {
+		EMSG("mpsign failed with code 0x%x\n", res);
+		return res;
+	}
+
+	/* mpmr content */
+	mpmr_reg.data = params[2].memref.buffer;
+	mpmr_reg.length = params[2].memref.size;
+
+	res = mpmr_content(&mpmr_reg);
+	if (res != TEE_SUCCESS) {
+		EMSG("mpmr_content failed with code 0x%x\n", res);
+		return res;
+	}
+	else
+		DMSG("mp_signature function got mpmr TEE_SUCCESS\n");
+	return res;
+}
+
 /**
  * @brief   Called when a pseudo TA is invoked.
  *
@@ -240,7 +315,7 @@ static TEE_Result invokeCommandEntryPoint(void *sess_ctx __unused,
 {
 	switch (cmd_id) {
 	case PTA_MANUFACT_PROTEC_CMD_CERT:
-		return certificate_signature(param_types, params);
+		return mp_signature(param_types, params);
 	case PTA_MANUFACT_PROTEC_CMD_PUBKEY:
 		return pub_issuer_key(param_types, params);
 	default:
