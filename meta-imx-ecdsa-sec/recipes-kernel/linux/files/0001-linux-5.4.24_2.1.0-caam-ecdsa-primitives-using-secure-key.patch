From 7685737af7fb58ac0fd97aec4d0044fdf6239d88 Mon Sep 17 00:00:00 2001
From: Marouene Boubakri <marouene.boubakri@nxp.com>
Date: Mon, 5 Oct 2020 17:14:08 +0200
Subject: [PATCH 1/1] linux-5.4.24_2.1.0: caam ecdsa primitives using secure key

---
 drivers/crypto/caam/caampkc.c | 594 +++++++++++++++++++++++++++++++++++++++++-
 drivers/crypto/caam/caampkc.h | 209 ++++++++++++++-
 2 files changed, 801 insertions(+), 2 deletions(-)

diff --git a/drivers/crypto/caam/caampkc.c b/drivers/crypto/caam/caampkc.c
index bfbb8d3..6411635 100644
--- a/drivers/crypto/caam/caampkc.c
+++ b/drivers/crypto/caam/caampkc.c
@@ -3,7 +3,7 @@
  * caam - Freescale FSL CAAM support for Public Key Cryptography
  *
  * Copyright 2016 Freescale Semiconductor, Inc.
- * Copyright 2018-2019 NXP
+ * Copyright 2018-2020 NXP
  *
  * There is no Shared Descriptor for PKC so that the Job Descriptor must carry
  * all the desired key parameters, input and output pointers.
@@ -26,6 +26,184 @@
 				 SIZEOF_RSA_PRIV_F3_PDB)
 #define CAAM_RSA_MAX_INPUT_SIZE	512 /* for a 4096-bit modulus */
 
+/* Returns 1 for a valid signature */
+#define ECDSA_VERIFY_SUCCESS	1
+/* Returns 0 for an invalid signature */
+#define ECDSA_VERIFY_FAIL		0
+
+/* If the signature is incorrect, 0x86 status code is returned */
+#define ECDSA_INVA_SIG_STATUS	0x86
+
+/* ECDSA Protocol Data Block */
+#define CAAM_PROTINFO_SEC_KEY	(0x01 << 2)
+/* ECB-encrypted key
+ * The bit is ignored for signature verification because only public
+ * keys are used.
+ */
+#define CAAM_PROTOP_CTYPE		(0x10u << 27)
+/**
+ * When the PD (Predefined Domain) bit in the PDB is 1,
+ * the ECDSEL (Elliptic Curve Domain Selection) field is
+ * used  to select one of the built-in ECC domains
+ */
+#define CAAM_ECDSA_PD			(0x1 <<  22)
+
+/* CAAM EC key pair generation*/
+#define CAAM_CMD_ECC_GEN_KP		(0x2 << 24)
+
+/* ECC prime field (Fp) */
+#define ECC_DOMAIN_FP			0
+/* ECC binary field (F2M) */
+#define ECC_DOMAIN_F2M			1
+
+#define SIZEOF_ECDSA_KEYGEN_PDB (CAAM_CMD_SZ + 2 * CAAM_PTR_SZ)
+#define SIZEOF_ECDSA_SIGN_PDB (CAAM_CMD_SZ + 4 * CAAM_PTR_SZ)
+#define SIZEOF_ECDSA_VERIFY_PDB (CAAM_CMD_SZ + 5 * CAAM_PTR_SZ)
+
+/* CAAM built-in curves with data */
+static const ec_curve_t caam_ec_curve_list[] = {
+	{CAAM_EC_CURVE_P_192, {0x00, 0, 24, 24} },
+	{CAAM_EC_CURVE_P_224, {0x01, 0, 28, 28} },
+	{CAAM_EC_CURVE_P_256, {0x02, 0, 32, 32} },
+	{CAAM_EC_CURVE_P_384, {0x03, 0, 48, 48} },
+	{CAAM_EC_CURVE_P_521, {0x04, 0, 66, 66} },
+	{CAAM_EC_CURVE_PRIME192V1, {0x00, 0, 24, 24} },
+	{CAAM_EC_CURVE_PRIME192V2, {0x13, 0, 24, 24} },
+	{CAAM_EC_CURVE_PRIME192V3, {0x14, 0, 24, 24} },
+	{CAAM_EC_CURVE_PRIME239V1, {0x15, 0, 30, 30} },
+	{CAAM_EC_CURVE_PRIME239V2, {0x16, 0, 30, 30} },
+	{CAAM_EC_CURVE_PRIME239V3, {0x17, 0, 30, 30} },
+	{CAAM_EC_CURVE_PRIME256V1, {0x02, 0, 32, 32} },
+	{CAAM_EC_CURVE_SECP112R1, {0x18, 0, 14, 14} },
+	{CAAM_EC_CURVE_SECP160K1, {0x1B, 0, 20, 21} },
+	{CAAM_EC_CURVE_SECP160R1, {0x1C, 0, 20, 21} },
+	{CAAM_EC_CURVE_SECP160R2, {0x1D, 0, 20, 21} },
+	{CAAM_EC_CURVE_SECP192K1, {0x1E, 0, 24, 24} },
+	{CAAM_EC_CURVE_SECP192R1, {0x00, 0, 24, 24} },
+	{CAAM_EC_CURVE_SECP224R1, {0x01, 0, 28, 28} },
+	{CAAM_EC_CURVE_SECP224K1, {0x1F, 0, 28, 29} },
+	{CAAM_EC_CURVE_SECP256K1, {0x20, 0, 32, 32} },
+	{CAAM_EC_CURVE_SECP256R1, {0x02, 0, 32, 32} },
+	{CAAM_EC_CURVE_SECP384R1, {0x03, 0, 48, 48} },
+	{CAAM_EC_CURVE_SECP521R1, {0x04, 0, 66, 66} },
+	{CAAM_EC_CURVE_SECT113R1, {0x4B, 1, 15, 15} },
+	{CAAM_EC_CURVE_SECT163R1, {0x4F, 1, 21, 21} },
+	{CAAM_EC_CURVE_SECT163R2, {0x40, 1, 21, 21} },
+	{CAAM_EC_CURVE_SECT163K1, {0x45, 1, 21, 21} },
+	{CAAM_EC_CURVE_SECT193R1, {0x50, 1, 25, 25} },
+	{CAAM_EC_CURVE_SECT193R2, {0x51, 1, 25, 25} },
+	{CAAM_EC_CURVE_SECT233K1, {0x46, 1, 30, 29} },
+	{CAAM_EC_CURVE_SECT233R1, {0x41, 1, 30, 30} },
+	{CAAM_EC_CURVE_SECT239K1, {0x52, 1, 30, 30} },
+	{CAAM_EC_CURVE_SECT283K1, {0x47, 1, 36, 36} },
+	{CAAM_EC_CURVE_SECT283R1, {0x42, 1, 36, 36} },
+	{CAAM_EC_CURVE_SECT409K1, {0x48, 1, 52, 51} },
+	{CAAM_EC_CURVE_SECT409R1, {0x43, 1, 52, 52} },
+	{CAAM_EC_CURVE_SECT571K1, {0x49, 1, 72, 72} },
+	{CAAM_EC_CURVE_SECT571R1, {0x44, 1, 72, 72} },
+	{CAAM_EC_CURVE_ANSIX9P192R1, {0x00, 0, 24, 24} },
+	{CAAM_EC_CURVE_ANSIX9P224R1, {0x01, 0, 28, 28} },
+	{CAAM_EC_CURVE_ANSIX9P256R1, {0x02, 0, 32, 32} },
+	{CAAM_EC_CURVE_ANSIX9P384R1, {0x03, 0, 48, 48} },
+	{CAAM_EC_CURVE_ANSIX9P521R1, {0x04, 0, 66, 66} },
+	{CAAM_EC_CURVE_ANSIX9P160K1, {0x1B, 0, 20, 21} },
+	{CAAM_EC_CURVE_ANSIX9P160R2, {0x1D, 0, 20, 21} },
+	{CAAM_EC_CURVE_ANSIX9P224K1, {0x1F, 0, 28, 29} },
+	{CAAM_EC_CURVE_ANSIX9P160R1, {0x1C, 0, 20, 21} },
+	{CAAM_EC_CURVE_ANSIX9P192K1, {0x1E, 0, 24, 24} },
+	{CAAM_EC_CURVE_ANSIX9P256K1, {0x20, 0, 32, 32} },
+	{CAAM_EC_CURVE_ANSIX9T163R2, {0x40, 1, 21, 21} },
+	{CAAM_EC_CURVE_ANSIX9T233R1, {0x41, 1, 30, 30} },
+	{CAAM_EC_CURVE_ANSIX9T283R1, {0x42, 1, 36, 36} },
+	{CAAM_EC_CURVE_ANSIX9T163K1, {0x45, 1, 21, 21} },
+	{CAAM_EC_CURVE_ANSIX9T233K1, {0x46, 1, 30, 29} },
+	{CAAM_EC_CURVE_ANSIX9T283K1, {0x47, 1, 36, 36} },
+	{CAAM_EC_CURVE_ANSIX9T571K1, {0x49, 1, 72, 72} },
+	{CAAM_EC_CURVE_ANSIX9T163R1, {0x4F, 1, 21, 21} },
+	{CAAM_EC_CURVE_ANSIX9T193R1, {0x50, 1, 25, 25} },
+	{CAAM_EC_CURVE_ANSIX9T193R2, {0x51, 1, 25, 25} },
+	{CAAM_EC_CURVE_ANSIX9T239K1, {0x52, 1, 30, 30} },
+	{CAAM_EC_CURVE_ANSIX9T409R1, {0x43, 1, 52, 52} },
+	{CAAM_EC_CURVE_ANSIX9T571R1, {0x44, 1, 72, 72} },
+	{CAAM_EC_CURVE_ANSIX9T409K1, {0x48, 1, 52, 51} },
+	{CAAM_EC_CURVE_WTLS1, {0x4A, 1, 15, 14} },
+	{CAAM_EC_CURVE_WTLS3, {0x45, 1, 21, 21} },
+	{CAAM_EC_CURVE_WTLS4, {0x4B, 1, 15, 15} },
+	{CAAM_EC_CURVE_WTLS5, {0x4C, 1, 21, 21} },
+	{CAAM_EC_CURVE_WTLS6, {0x18, 0, 14, 14} },
+	{CAAM_EC_CURVE_WTLS7, {0x1C, 0, 20, 21} },
+	{CAAM_EC_CURVE_WTLS8, {0x19, 0, 14, 15} },
+	{CAAM_EC_CURVE_WTLS9, {0x1A, 0, 20, 21} },
+	{CAAM_EC_CURVE_WTLS10, {0x46, 1, 30, 29} },
+	{CAAM_EC_CURVE_WTLS11, {0x41, 1, 30, 30} },
+	{CAAM_EC_CURVE_WTLS12, {0x01, 0, 28, 28} },
+	{CAAM_EC_CURVE_ECDSA_256, {0x02, 0, 32, 32} },
+	{CAAM_EC_CURVE_ECDSA_384, {0x03, 0, 48, 48} },
+	{CAAM_EC_CURVE_ECDSA_521, {0x04, 0, 66, 66} },
+	{CAAM_EC_CURVE_BRAINPOOLP160R1, {0x05, 0, 20, 20} },
+	{CAAM_EC_CURVE_BRAINPOOLP160T1, {0x06, 0, 20, 20} },
+	{CAAM_EC_CURVE_BRAINPOOLP192R1, {0x07, 0, 24, 24} },
+	{CAAM_EC_CURVE_BRAINPOOLP192T1, {0x08, 0, 24, 24} },
+	{CAAM_EC_CURVE_BRAINPOOLP224R1, {0x09, 0, 28, 28} },
+	{CAAM_EC_CURVE_BRAINPOOLP224T1, {0x0A, 0, 28, 28} },
+	{CAAM_EC_CURVE_BRAINPOOLP256R1, {0x0B, 0, 32, 32} },
+	{CAAM_EC_CURVE_BRAINPOOLP256T1, {0x0C, 0, 32, 32} },
+	{CAAM_EC_CURVE_BRAINPOOLP320R1, {0x0D, 0, 40, 40} },
+	{CAAM_EC_CURVE_BRAINPOOLP320T1, {0x0E, 0, 40, 40} },
+	{CAAM_EC_CURVE_BRAINPOOLP384R1, {0x0F, 0, 48, 48} },
+	{CAAM_EC_CURVE_BRAINPOOLP384T1, {0x10, 0, 48, 48} },
+	{CAAM_EC_CURVE_BRAINPOOLP512R1, {0x11, 0, 64, 64} },
+	{CAAM_EC_CURVE_BRAINPOOLP512T1, {0x12, 0, 64, 64} },
+	{CAAM_EC_CURVE_B_163, {0x40, 1, 21, 21} },
+	{CAAM_EC_CURVE_B_233, {0x41, 1, 30, 30} },
+	{CAAM_EC_CURVE_B_283, {0x42, 1, 36, 36} },
+	{CAAM_EC_CURVE_B_409, {0x43, 1, 52, 52} },
+	{CAAM_EC_CURVE_B_571, {0x44, 1, 72, 72} },
+	{CAAM_EC_CURVE_K_163, {0x45, 1, 21, 21} },
+	{CAAM_EC_CURVE_K_233, {0x46, 1, 30, 29} },
+	{CAAM_EC_CURVE_K_283, {0x47, 1, 36, 36} },
+	{CAAM_EC_CURVE_K_409, {0x48, 1, 52, 51} },
+	{CAAM_EC_CURVE_K_571, {0x49, 1, 72, 72} },
+	{CAAM_EC_CURVE_ECP_GROUP_19, {0x02, 0, 32, 32} },
+	{CAAM_EC_CURVE_ECP_GROUP_20, {0x03, 0, 48, 48} },
+	{CAAM_EC_CURVE_ECP_GROUP_21, {0x04, 0, 66, 66} },
+	{CAAM_EC_CURVE_EC2N_GROUP_3, {0x53, 1, 20, 0} },
+	{CAAM_EC_CURVE_EC2N_GROUP_4, {0x54, 1, 24, 0} },
+	{CAAM_EC_CURVE_C2PNB163V1, {0x4C, 1, 21, 21} },
+	{CAAM_EC_CURVE_C2PNB163V2, {0x4D, 1, 21, 21} },
+	{CAAM_EC_CURVE_C2PNB163V3, {0x4E, 1, 21, 21} },
+	{CAAM_EC_CURVE_ECPRGF192RANDOM, {0x00, 0, 24, 24} },
+	{CAAM_EC_CURVE_ECPRGF224RANDOM, {0x01, 0, 28, 28} },
+	{CAAM_EC_CURVE_ECPRGF256RANDOM, {0x02, 0, 32, 32} },
+	{CAAM_EC_CURVE_ECPRGF384RANDOM, {0x03, 0, 48, 48} },
+	{CAAM_EC_CURVE_ECPRGF521RANDOM, {0x04, 0, 66, 66} },
+	{CAAM_EC_CURVE_EC2NGF163RANDOM, {0x40, 1, 21, 21} },
+	{CAAM_EC_CURVE_EC2NGF233RANDOM, {0x41, 1, 30, 30} },
+	{CAAM_EC_CURVE_EC2NGF283RANDOM, {0x42, 1, 36, 36} },
+	{CAAM_EC_CURVE_EC2NGF409RANDOM, {0x43, 1, 52, 52} },
+	{CAAM_EC_CURVE_EC2NGF571RANDOM, {0x44, 1, 72, 72} },
+	{CAAM_EC_CURVE_EC2NGF163KOBLITZ, {0x45, 1, 21, 21} },
+	{CAAM_EC_CURVE_EC2NGF233KOBLITZ, {0x46, 1, 30, 29} },
+	{CAAM_EC_CURVE_EC2NGF283KOBLITZ, {0x47, 1, 36, 36} },
+	{CAAM_EC_CURVE_EC2NGF409KOBLITZ, {0x48, 1, 52, 51} },
+	{CAAM_EC_CURVE_EC2NGF571KOBLITZ, {0x49, 1, 72, 72} },
+	{CAAM_EC_CURVE_OAKLEY_3, {0x53, 1, 20, 0} },
+	{CAAM_EC_CURVE_OAKLEY_4, {0x54, 1, 24, 0} },
+	{CAAM_EC_CURVE_UNDEFINED, {0, 0, 0, 0} }
+};
+
+/* pk per-device context */
+struct caam_ecdsa_ctx_t {
+	struct device *jrdev;
+};
+
+struct caam_operation_result {
+	struct completion completion;
+	int err;
+};
+
+static struct caam_ecdsa_ctx_t *caam_ecdsa_ctx;
+
 /* buffer filled with zeros, used for padding */
 static u8 *zero_buffer;
 
@@ -1148,6 +1326,413 @@ static struct caam_akcipher_alg caam_rsa = {
 	}
 };
 
+struct device *caam_pkcsec_get_jrdev(void)
+{
+	if (caam_ecdsa_ctx != NULL) {
+		if (caam_ecdsa_ctx->jrdev != NULL) {
+			return caam_ecdsa_ctx->jrdev;
+		}
+	}
+	return NULL;
+}
+EXPORT_SYMBOL(caam_pkcsec_get_jrdev);
+
+int caam_pk_status(void)
+{
+	return NULL != caam_ecdsa_ctx ? 1:0;
+}
+EXPORT_SYMBOL(caam_pk_status);
+
+
+const ec_curve_t *caam_select_ec_curve(int cid)
+{
+	const ec_curve_t *curve = &caam_ec_curve_list[0];
+
+	for (; curve != &(caam_ec_curve_list[sizeof(caam_ec_curve_list)/
+		sizeof(ec_curve_t)]); curve++)
+	if (curve->cid == cid)
+		return curve;
+	return NULL;
+}
+
+int caam_ecdsa_sign_init(caam_ecdsa_sign_t *ecdsa_sign)
+{
+	struct device *jrdev = caam_ecdsa_ctx->jrdev;
+	const ec_curve_data_t *curve_data;
+	int ret = 0;
+	size_t total_len;
+
+	ecdsa_sign->curve = caam_select_ec_curve(ecdsa_sign->curve_id);
+	if (unlikely(!ecdsa_sign->curve))
+		goto curve_select_fail;
+
+	curve_data = &ecdsa_sign->curve->data;
+
+	ecdsa_sign->desc = kmalloc(MAX_CAAM_DESCSIZE *
+					sizeof(u32), GFP_KERNEL | GFP_DMA);
+	if (unlikely(!ecdsa_sign->desc))
+		goto desc_alloc_fail;
+	total_len = curve_data->l_len + curve_data->n_len * 3;
+	ecdsa_sign->addr_s = dma_alloc_coherent(jrdev, total_len,
+				&ecdsa_sign->phy_addr_s, GFP_KERNEL | GFP_DMA);
+	if (unlikely(!ecdsa_sign->addr_s))
+		goto q_alloc_fail;
+
+	memset(ecdsa_sign->addr_s, 0, total_len);
+	ecdsa_sign->addr_f = ecdsa_sign->addr_s + curve_data->l_len;
+	ecdsa_sign->phy_addr_f = ecdsa_sign->phy_addr_s + curve_data->l_len;
+	ecdsa_sign->addr_c = ecdsa_sign->addr_f + curve_data->n_len;
+	ecdsa_sign->phy_addr_c = ecdsa_sign->phy_addr_f + curve_data->n_len;
+	ecdsa_sign->addr_d = ecdsa_sign->addr_c + curve_data->n_len;
+	ecdsa_sign->phy_addr_d = ecdsa_sign->phy_addr_c + curve_data->n_len;
+
+	return ret;
+
+q_alloc_fail:
+	kfree(ecdsa_sign->desc);
+desc_alloc_fail:
+	return -ENOMEM;
+curve_select_fail:
+	return -EINVAL;
+}
+EXPORT_SYMBOL(caam_ecdsa_sign_init);
+
+int caam_ecdsa_sign_deinit(caam_ecdsa_sign_t *ecdsa_sign)
+{
+	struct device *jrdev = caam_ecdsa_ctx->jrdev;
+
+	const ec_curve_data_t *curve_data = &ecdsa_sign->curve->data;
+
+	dma_free_coherent(jrdev, curve_data->l_len + curve_data->n_len * 3,
+	(void *)ecdsa_sign->addr_s, ecdsa_sign->phy_addr_s);
+
+	kfree(ecdsa_sign->desc);
+
+	return 0;
+}
+EXPORT_SYMBOL(caam_ecdsa_sign_deinit);
+
+int caam_ecdsa_sign(caam_ecdsa_sign_t *ecdsa_sign)
+{
+	struct device *jrdev = caam_ecdsa_ctx->jrdev;
+	u32 *desc = ecdsa_sign->desc;
+	int ret = 0;
+	struct caam_operation_result res;
+
+	const ec_curve_data_t *curve_data = &ecdsa_sign->curve->data;
+
+	memset(desc, 0, MAX_CAAM_DESCSIZE * sizeof(u32));
+
+	caam_ecdsa_sign_jobdesc(desc, ecdsa_sign);
+
+	res.err = 0;
+	init_completion(&res.completion);
+
+	ret = caam_jr_enqueue(jrdev, desc, caam_operation_done, &res);
+	if (ret == -EINPROGRESS) {
+		wait_for_completion(&res.completion);
+		ret = res.err;
+	}
+
+	dma_sync_single_for_cpu(jrdev, ecdsa_sign->phy_addr_c,
+					curve_data->n_len, DMA_FROM_DEVICE);
+	dma_sync_single_for_cpu(jrdev, ecdsa_sign->phy_addr_d,
+					curve_data->n_len, DMA_FROM_DEVICE);
+
+	return ret;
+}
+EXPORT_SYMBOL(caam_ecdsa_sign);
+
+int caam_ecdsa_verify_init(caam_ecdsa_verify_t *ecdsa_verify)
+{
+	struct device *jrdev = caam_ecdsa_ctx->jrdev;
+	const ec_curve_data_t *curve_data;
+	int ret = 0;
+	size_t total_len;
+
+	ecdsa_verify->curve = caam_select_ec_curve(ecdsa_verify->curve_id);
+	if (unlikely(!ecdsa_verify->curve))
+		goto curve_select_fail;
+
+	curve_data = &ecdsa_verify->curve->data;
+	ecdsa_verify->desc = kmalloc(MAX_CAAM_DESCSIZE *
+				sizeof(u32), GFP_KERNEL | GFP_DMA);
+	if (unlikely(!ecdsa_verify->desc))
+		goto desc_alloc_fail;
+	total_len = curve_data->l_len * 4 + curve_data->n_len * 3;
+	ecdsa_verify->addr_w = dma_alloc_coherent(jrdev, total_len,
+		&ecdsa_verify->phy_addr_w, GFP_KERNEL | GFP_DMA);
+	if (unlikely(!ecdsa_verify->addr_w))
+		goto q_alloc_fail;
+
+	memset(ecdsa_verify->addr_w, 0, total_len);
+	ecdsa_verify->addr_f = ecdsa_verify->addr_w + curve_data->l_len * 2;
+	ecdsa_verify->phy_addr_f  = ecdsa_verify->phy_addr_w +
+			curve_data->l_len * 2;
+	ecdsa_verify->addr_c = ecdsa_verify->addr_f + curve_data->n_len;
+	ecdsa_verify->phy_addr_c  = ecdsa_verify->phy_addr_f +
+			curve_data->n_len;
+	ecdsa_verify->addr_d = ecdsa_verify->addr_c + curve_data->n_len;
+	ecdsa_verify->phy_addr_d  = ecdsa_verify->phy_addr_c +
+			curve_data->n_len;
+	ecdsa_verify->addr_tmp = ecdsa_verify->addr_d + curve_data->n_len;
+	ecdsa_verify->phy_addr_tmp  = ecdsa_verify->phy_addr_d +
+			curve_data->n_len;
+
+	return ret;
+
+q_alloc_fail:
+	kfree(ecdsa_verify->desc);
+desc_alloc_fail:
+	return -ENOMEM;
+curve_select_fail:
+	return -EINVAL;
+}
+EXPORT_SYMBOL(caam_ecdsa_verify_init);
+
+int caam_ecdsa_verify_deinit(caam_ecdsa_verify_t *ecdsa_verify)
+{
+	struct device *jrdev = caam_ecdsa_ctx->jrdev;
+	const ec_curve_data_t *curve_data = &ecdsa_verify->curve->data;
+
+	dma_free_coherent(jrdev, curve_data->l_len * 2 +
+			curve_data->n_len * 3,
+			(void *)ecdsa_verify->addr_w,
+			ecdsa_verify->phy_addr_w);
+	kfree(ecdsa_verify->desc);
+
+	return 0;
+}
+EXPORT_SYMBOL(caam_ecdsa_verify_deinit);
+
+
+int caam_ecdsa_verify(caam_ecdsa_verify_t *ecdsa_verify)
+{
+	struct device *jrdev = caam_ecdsa_ctx->jrdev;
+	u32 *desc = ecdsa_verify->desc;
+
+	int ret = 0;
+	struct caam_operation_result res;
+
+	memset(desc, 0, MAX_CAAM_DESCSIZE * sizeof(u32));
+
+	caam_ecdsa_verify_jobdesc(desc, ecdsa_verify);
+
+	res.err = 0;
+	init_completion(&res.completion);
+
+	/*If the signature is correct, caam_jr_enqueue terminates normally.*/
+	ret = caam_jr_enqueue(jrdev, desc, caam_operation_done, &res);
+	if (ret == -EINPROGRESS) {
+		wait_for_completion(&res.completion);
+	}
+
+	if (res.err == 0)
+		return ECDSA_VERIFY_SUCCESS;
+	else if ((res.err & 0xff) == ECDSA_INVA_SIG_STATUS)
+		return ECDSA_VERIFY_FAIL;
+	else
+		return ret;
+}
+EXPORT_SYMBOL(caam_ecdsa_verify);
+
+int caam_ecdsa_keygen_init(caam_ecdsa_keygen_t *ecdsa_keygen)
+{
+	struct device *jrdev = caam_ecdsa_ctx->jrdev;
+	const ec_curve_data_t *curve_data = NULL;
+	int ret = 0;
+	size_t total_len;
+
+	ecdsa_keygen->curve = caam_select_ec_curve(ecdsa_keygen->curve_id);
+	if (unlikely(!ecdsa_keygen->curve))
+		goto curve_select_fail;
+
+	curve_data = &ecdsa_keygen->curve->data;
+
+	ecdsa_keygen->desc = kmalloc(MAX_CAAM_DESCSIZE *
+		sizeof(u32), GFP_KERNEL | GFP_DMA);
+	if (unlikely(!ecdsa_keygen->desc))
+		goto desc_alloc_fail;
+	total_len = curve_data->l_len * 3;
+	ecdsa_keygen->addr_s = dma_alloc_coherent(jrdev, total_len,
+		&ecdsa_keygen->phy_addr_s, GFP_KERNEL | GFP_DMA);
+	if (unlikely(!ecdsa_keygen->addr_s))
+		goto q_alloc_fail;
+
+	memset(ecdsa_keygen->addr_s, 0, total_len);
+	ecdsa_keygen->addr_w = ecdsa_keygen->addr_s + curve_data->l_len;
+	ecdsa_keygen->phy_addr_w = ecdsa_keygen->phy_addr_s + curve_data->l_len;
+
+	return ret;
+
+q_alloc_fail:
+	kfree(ecdsa_keygen->desc);
+desc_alloc_fail:
+	return -ENOMEM;
+curve_select_fail:
+	return -EINVAL;
+}
+EXPORT_SYMBOL(caam_ecdsa_keygen_init);
+
+int caam_ecdsa_keygen_deinit(caam_ecdsa_keygen_t *ecdsa_keygen)
+{
+	struct device *jrdev = caam_ecdsa_ctx->jrdev;
+	const ec_curve_data_t *curve_data = NULL;
+	curve_data = &ecdsa_keygen->curve->data;
+
+	dma_free_coherent(jrdev, curve_data->l_len * 3,
+	(void *)ecdsa_keygen->addr_s, ecdsa_keygen->phy_addr_s);
+
+	kfree(ecdsa_keygen->desc);
+
+	return 0;
+}
+EXPORT_SYMBOL(caam_ecdsa_keygen_deinit);
+
+int caam_ecdsa_keygen(caam_ecdsa_keygen_t *ecdsa_keygen)
+{
+	struct device *jrdev = caam_ecdsa_ctx->jrdev;
+	u32 *desc = ecdsa_keygen->desc;
+	const ec_curve_data_t *curve_data = &ecdsa_keygen->curve->data;
+
+	int ret = 0;
+	struct caam_operation_result res;
+	
+	memset(desc, 0, MAX_CAAM_DESCSIZE * sizeof(u32));
+
+	caam_ecdsa_keygen_jobdesc(desc, ecdsa_keygen);
+
+	res.err = 0;
+	init_completion(&res.completion);
+
+	ret = caam_jr_enqueue(jrdev, desc, caam_operation_done, &res);
+	if (ret == -EINPROGRESS) {
+		wait_for_completion(&res.completion);
+		ret = res.err;
+	}
+
+	dma_sync_single_for_cpu(jrdev, ecdsa_keygen->phy_addr_s,
+		curve_data->l_len, DMA_FROM_DEVICE);
+	dma_sync_single_for_cpu(jrdev, ecdsa_keygen->phy_addr_w,
+		curve_data->l_len*2, DMA_FROM_DEVICE);
+	
+	return ret;
+}
+EXPORT_SYMBOL(caam_ecdsa_keygen);
+
+
+void caam_ecdsa_sign_jobdesc(u32 *desc, caam_ecdsa_sign_t *ecdsa_sign)
+{
+
+	const ec_curve_t *curve = caam_select_ec_curve(ecdsa_sign->curve_id);
+	const ec_curve_data_t *curve_data = &curve->data;
+	u32 op;
+
+	init_job_desc_pdb(desc, 0, SIZEOF_ECDSA_SIGN_PDB);
+	append_cmd(desc, ((curve_data->caam_ec_id & 0x7F) << 7) | CAAM_ECDSA_PD);
+	append_ptr(desc, ecdsa_sign->phy_addr_s);
+	append_ptr(desc, ecdsa_sign->phy_addr_f);
+	append_ptr(desc, ecdsa_sign->phy_addr_c);
+	append_ptr(desc, ecdsa_sign->phy_addr_d);
+
+	op = CAAM_PROTOP_CTYPE | OP_TYPE_UNI_PROTOCOL |
+			OP_PCLID_DSASIGN | OP_PCL_PKPROT_ECC;
+	op |= (ecdsa_sign->key_color ==
+		KEY_COLOR_BLACK) ? CAAM_PROTINFO_SEC_KEY:0;
+
+	append_operation(desc, op);
+
+    dma_sync_single_for_device(caam_ecdsa_ctx->jrdev,
+		ecdsa_sign->phy_addr_s, curve_data->l_len * 2 +
+		curve_data->n_len * 2, DMA_TO_DEVICE);
+
+}
+
+void caam_ecdsa_verify_jobdesc(u32 *desc, caam_ecdsa_verify_t *ecdsa_verify)
+{
+	const ec_curve_t *curve = caam_select_ec_curve(ecdsa_verify->curve_id);
+	const ec_curve_data_t *curve_data = &curve->data;
+
+	u32 op;
+
+	init_job_desc_pdb(desc, 0, SIZEOF_ECDSA_VERIFY_PDB);
+	append_cmd(desc, ((curve_data->caam_ec_id & 0x7F) << 7) | CAAM_ECDSA_PD);
+	append_ptr(desc, ecdsa_verify->phy_addr_w);
+	append_ptr(desc, ecdsa_verify->phy_addr_f);
+	append_ptr(desc, ecdsa_verify->phy_addr_c);
+	append_ptr(desc, ecdsa_verify->phy_addr_d);
+	append_ptr(desc, ecdsa_verify->phy_addr_tmp);
+	op = CAAM_PROTOP_CTYPE | OP_TYPE_UNI_PROTOCOL |
+			OP_PCLID_DSAVERIFY | OP_PCL_PKPROT_ECC;
+	append_operation(desc, op);
+
+	dma_sync_single_for_device(caam_ecdsa_ctx->jrdev,
+					ecdsa_verify->phy_addr_w,
+	curve_data->l_len * 4 + curve_data->n_len * 3, DMA_TO_DEVICE);
+
+}
+
+void caam_ecdsa_keygen_jobdesc(u32 *desc, caam_ecdsa_keygen_t *ecdsa_keygen)
+{
+	const ec_curve_t *curve = caam_select_ec_curve(ecdsa_keygen->curve_id);
+	const ec_curve_data_t *curve_data = &curve->data;
+	u32 op;
+
+	init_job_desc_pdb(desc, 0, SIZEOF_ECDSA_KEYGEN_PDB);
+	append_cmd(desc, ((curve_data->caam_ec_id & 0x7F)  << 7) | CAAM_CMD_ECC_GEN_KP);
+	append_ptr(desc, ecdsa_keygen->phy_addr_s);
+	append_ptr(desc, ecdsa_keygen->phy_addr_w);
+	op = CAAM_PROTOP_CTYPE | OP_TYPE_UNI_PROTOCOL |
+			 OP_PCLID_PUBLICKEYPAIR | OP_PCL_PKPROT_ECC;
+	op |= (ecdsa_keygen->key_color == KEY_COLOR_BLACK) ?
+			CAAM_PROTINFO_SEC_KEY:0;
+	append_operation(desc, op);
+
+
+    dma_sync_single_for_device(caam_ecdsa_ctx->jrdev,
+	ecdsa_keygen->phy_addr_s, curve_data->l_len * 3, DMA_TO_DEVICE);
+}
+
+void caam_operation_done(struct device *dev, u32 *desc, u32 err, void *context)
+{
+	struct caam_operation_result *res = context;
+
+	dev_err(dev, "%s %d: err 0x%x\n", __func__, __LINE__, err);
+	if (err)
+		caam_jr_strstatus(dev, err);
+
+	res->err = err;
+	complete(&res->completion);
+}
+
+
+static int caam_ecdsa_init(void) {
+	struct device *jrdev;
+
+	printk("caam_ecdsa init\n");
+	jrdev = caam_jr_alloc();
+	if (IS_ERR(jrdev)) {
+		caam_ecdsa_ctx = NULL;
+		pr_err("Job Ring Device allocation for transform failed\n");
+		return PTR_ERR(jrdev);
+	}
+	caam_ecdsa_ctx = kmalloc(sizeof(struct caam_ecdsa_ctx_t), GFP_DMA | GFP_KERNEL);
+	if (unlikely(!caam_ecdsa_ctx))
+		return -ENOMEM;
+
+	caam_ecdsa_ctx->jrdev = jrdev;
+
+	return 0;
+}
+
+static void caam_ecdsa_exit(void)
+{
+	printk("caam_ecdsa exit\n");
+	caam_jr_free(caam_ecdsa_ctx->jrdev);
+	kfree(caam_ecdsa_ctx);
+	caam_ecdsa_ctx = NULL;
+}
+
 /* Public Key Cryptography module initialization handler */
 int caam_pkc_init(struct device *ctrldev)
 {
@@ -1185,6 +1770,11 @@ int caam_pkc_init(struct device *ctrldev)
 		dev_info(ctrldev, "caam pkc algorithms registered in /proc/crypto\n");
 	}
 
+	err = caam_ecdsa_init();
+	if (err) {
+		dev_warn(ctrldev, "caam ecdsa init failed\n");
+	}
+
 	return err;
 }
 
@@ -1196,5 +1786,7 @@ void caam_pkc_exit(void)
 	if (caam_rsa.registered)
 		crypto_unregister_akcipher(&caam_rsa.akcipher);
 
+	caam_ecdsa_exit();
+
 	kfree(zero_buffer);
 }
diff --git a/drivers/crypto/caam/caampkc.h b/drivers/crypto/caam/caampkc.h
index cc889a5..d15bde4 100644
--- a/drivers/crypto/caam/caampkc.h
+++ b/drivers/crypto/caam/caampkc.h
@@ -2,7 +2,7 @@
 /*
  * caam - Freescale FSL CAAM support for Public Key Cryptography descriptors
  *
- * Copyright 2016 Freescale Semiconductor, Inc.
+ * Copyright 2020 Freescale Semiconductor, Inc.
  *
  * There is no Shared Descriptor for PKC so that the Job Descriptor must carry
  * all the desired key parameters, input and output pointers.
@@ -14,6 +14,193 @@
 #include "pdb.h"
 #include <crypto/engine.h>
 
+/* CAAM ECC curves list */
+#define CAAM_EC_CURVE_P_192 0
+#define CAAM_EC_CURVE_P_224 1
+#define CAAM_EC_CURVE_P_256 2
+#define CAAM_EC_CURVE_P_384 3
+#define CAAM_EC_CURVE_P_521 4
+#define CAAM_EC_CURVE_PRIME192V1 5
+#define CAAM_EC_CURVE_PRIME192V2 6
+#define CAAM_EC_CURVE_PRIME192V3 7
+#define CAAM_EC_CURVE_PRIME239V1 8
+#define CAAM_EC_CURVE_PRIME239V2 9
+#define CAAM_EC_CURVE_PRIME239V3 10
+#define CAAM_EC_CURVE_PRIME256V1 11
+#define CAAM_EC_CURVE_SECP112R1 12
+#define CAAM_EC_CURVE_SECP160K1 13
+#define CAAM_EC_CURVE_SECP160R1 14
+#define CAAM_EC_CURVE_SECP160R2 15
+#define CAAM_EC_CURVE_SECP192K1 16
+#define CAAM_EC_CURVE_SECP192R1 17
+#define CAAM_EC_CURVE_SECP224R1 18
+#define CAAM_EC_CURVE_SECP224K1 19
+#define CAAM_EC_CURVE_SECP256K1 20
+#define CAAM_EC_CURVE_SECP256R1 21
+#define CAAM_EC_CURVE_SECP384R1 22
+#define CAAM_EC_CURVE_SECP521R1 23
+#define CAAM_EC_CURVE_SECT113R1 24
+#define CAAM_EC_CURVE_SECT163R1 25
+#define CAAM_EC_CURVE_SECT163R2 26
+#define CAAM_EC_CURVE_SECT163K1 27
+#define CAAM_EC_CURVE_SECT193R1 28
+#define CAAM_EC_CURVE_SECT193R2 29
+#define CAAM_EC_CURVE_SECT233K1 30
+#define CAAM_EC_CURVE_SECT233R1 31
+#define CAAM_EC_CURVE_SECT239K1 32
+#define CAAM_EC_CURVE_SECT283K1 33
+#define CAAM_EC_CURVE_SECT283R1 34
+#define CAAM_EC_CURVE_SECT409K1 35
+#define CAAM_EC_CURVE_SECT409R1 36
+#define CAAM_EC_CURVE_SECT571K1 37
+#define CAAM_EC_CURVE_SECT571R1 38
+#define CAAM_EC_CURVE_ANSIX9P192R1 39
+#define CAAM_EC_CURVE_ANSIX9P224R1 40
+#define CAAM_EC_CURVE_ANSIX9P256R1 41
+#define CAAM_EC_CURVE_ANSIX9P384R1 42
+#define CAAM_EC_CURVE_ANSIX9P521R1 43
+#define CAAM_EC_CURVE_ANSIX9P160K1 44
+#define CAAM_EC_CURVE_ANSIX9P160R2 45
+#define CAAM_EC_CURVE_ANSIX9P224K1 46
+#define CAAM_EC_CURVE_ANSIX9P160R1 47
+#define CAAM_EC_CURVE_ANSIX9P192K1 48
+#define CAAM_EC_CURVE_ANSIX9P256K1 49
+#define CAAM_EC_CURVE_ANSIX9T163R2 50
+#define CAAM_EC_CURVE_ANSIX9T233R1 51
+#define CAAM_EC_CURVE_ANSIX9T283R1 52
+#define CAAM_EC_CURVE_ANSIX9T163K1 53
+#define CAAM_EC_CURVE_ANSIX9T233K1 54
+#define CAAM_EC_CURVE_ANSIX9T283K1 55
+#define CAAM_EC_CURVE_ANSIX9T571K1 56
+#define CAAM_EC_CURVE_ANSIX9T163R1 57
+#define CAAM_EC_CURVE_ANSIX9T193R1 58
+#define CAAM_EC_CURVE_ANSIX9T193R2 59
+#define CAAM_EC_CURVE_ANSIX9T239K1 60
+#define CAAM_EC_CURVE_ANSIX9T409R1 61
+#define CAAM_EC_CURVE_ANSIX9T571R1 62
+#define CAAM_EC_CURVE_ANSIX9T409K1 63
+#define CAAM_EC_CURVE_WTLS1 64
+#define CAAM_EC_CURVE_WTLS3 65
+#define CAAM_EC_CURVE_WTLS4 66
+#define CAAM_EC_CURVE_WTLS5 67
+#define CAAM_EC_CURVE_WTLS6 68
+#define CAAM_EC_CURVE_WTLS7 69
+#define CAAM_EC_CURVE_WTLS8 70
+#define CAAM_EC_CURVE_WTLS9 71
+#define CAAM_EC_CURVE_WTLS10 72
+#define CAAM_EC_CURVE_WTLS11 73
+#define CAAM_EC_CURVE_WTLS12 74
+#define CAAM_EC_CURVE_ECDSA_256 75
+#define CAAM_EC_CURVE_ECDSA_384 76
+#define CAAM_EC_CURVE_ECDSA_521 77
+#define CAAM_EC_CURVE_BRAINPOOLP160R1 78
+#define CAAM_EC_CURVE_BRAINPOOLP160T1 79
+#define CAAM_EC_CURVE_BRAINPOOLP192R1 80
+#define CAAM_EC_CURVE_BRAINPOOLP192T1 81
+#define CAAM_EC_CURVE_BRAINPOOLP224R1 82
+#define CAAM_EC_CURVE_BRAINPOOLP224T1 83
+#define CAAM_EC_CURVE_BRAINPOOLP256R1 84
+#define CAAM_EC_CURVE_BRAINPOOLP256T1 85
+#define CAAM_EC_CURVE_BRAINPOOLP320R1 86
+#define CAAM_EC_CURVE_BRAINPOOLP320T1 87
+#define CAAM_EC_CURVE_BRAINPOOLP384R1 88
+#define CAAM_EC_CURVE_BRAINPOOLP384T1 89
+#define CAAM_EC_CURVE_BRAINPOOLP512R1 90
+#define CAAM_EC_CURVE_BRAINPOOLP512T1 91
+#define CAAM_EC_CURVE_B_163 92
+#define CAAM_EC_CURVE_B_233 93
+#define CAAM_EC_CURVE_B_283 94
+#define CAAM_EC_CURVE_B_409 95
+#define CAAM_EC_CURVE_B_571 96
+#define CAAM_EC_CURVE_K_163 97
+#define CAAM_EC_CURVE_K_233 98
+#define CAAM_EC_CURVE_K_283 99
+#define CAAM_EC_CURVE_K_409 100
+#define CAAM_EC_CURVE_K_571 101
+#define CAAM_EC_CURVE_ECP_GROUP_19 102
+#define CAAM_EC_CURVE_ECP_GROUP_20 103
+#define CAAM_EC_CURVE_ECP_GROUP_21 104
+#define CAAM_EC_CURVE_EC2N_GROUP_3 105
+#define CAAM_EC_CURVE_EC2N_GROUP_4 106
+#define CAAM_EC_CURVE_C2PNB163V1 107
+#define CAAM_EC_CURVE_C2PNB163V2 108
+#define CAAM_EC_CURVE_C2PNB163V3 109
+#define CAAM_EC_CURVE_ECPRGF192RANDOM 110
+#define CAAM_EC_CURVE_ECPRGF224RANDOM 111
+#define CAAM_EC_CURVE_ECPRGF256RANDOM 112
+#define CAAM_EC_CURVE_ECPRGF384RANDOM 113
+#define CAAM_EC_CURVE_ECPRGF521RANDOM 114
+#define CAAM_EC_CURVE_EC2NGF163RANDOM 115
+#define CAAM_EC_CURVE_EC2NGF233RANDOM 116
+#define CAAM_EC_CURVE_EC2NGF283RANDOM 117
+#define CAAM_EC_CURVE_EC2NGF409RANDOM 118
+#define CAAM_EC_CURVE_EC2NGF571RANDOM 119
+#define CAAM_EC_CURVE_EC2NGF163KOBLITZ 120
+#define CAAM_EC_CURVE_EC2NGF233KOBLITZ 121
+#define CAAM_EC_CURVE_EC2NGF283KOBLITZ 122
+#define CAAM_EC_CURVE_EC2NGF409KOBLITZ 123
+#define CAAM_EC_CURVE_EC2NGF571KOBLITZ 124
+#define CAAM_EC_CURVE_OAKLEY_3 125
+#define CAAM_EC_CURVE_OAKLEY_4 126
+#define CAAM_EC_CURVE_UNDEFINED	127
+
+typedef struct{
+	u8 caam_ec_id;
+	u8 field_type;	/* ECC binary field (F2M) or prime field (Fp) */
+	u32 l_len;		/* Size of the field (L) */
+	u32 n_len;	/* Size of the subgroup (N) */
+} ec_curve_data_t;
+
+typedef struct{
+	u32 cid;
+	ec_curve_data_t data;
+} ec_curve_t;
+
+typedef enum { KEY_COLOR_RED, KEY_COLOR_BLACK } key_color_t;
+
+typedef struct {
+	u8 *addr_s; /* private key */
+	u8 *addr_f; /* message representative */
+	u8 *addr_c; /* signature first half */
+	u8 *addr_d; /* signature second half */
+	dma_addr_t phy_addr_s;
+	dma_addr_t phy_addr_f;
+	dma_addr_t phy_addr_c;
+	dma_addr_t phy_addr_d;
+	u32 curve_id;
+	const ec_curve_t *curve;
+	u8 key_color;
+	u32 *desc;
+} caam_ecdsa_sign_t;
+
+typedef struct {
+	u8 *addr_w; /* public key */
+	u8 *addr_f; /* message representative */
+	u8 *addr_c; /* signature first half */
+	u8 *addr_d; /* signature second half */
+	u8 *addr_tmp; /* temporary buffer */
+	dma_addr_t phy_addr_w;
+	dma_addr_t phy_addr_f;
+	dma_addr_t phy_addr_c;
+	dma_addr_t phy_addr_d;
+	dma_addr_t phy_addr_tmp;
+	u32 curve_id;
+	const ec_curve_t *curve;
+	u8	key_color;
+	u32 *desc;
+} caam_ecdsa_verify_t;
+
+typedef struct {
+	u8 *addr_s; /* private key */
+	u8 *addr_w; /* public key */
+	dma_addr_t phy_addr_s;
+	dma_addr_t phy_addr_w;
+	u32 curve_id;
+	const ec_curve_t *curve;
+	u8	key_color;
+	u32 *desc;
+} caam_ecdsa_keygen_t;
+
 /**
  * caam_priv_key_form - CAAM RSA private key representation
  * CAAM RSA private key may have either of three forms.
@@ -155,4 +342,24 @@ void init_rsa_priv_f1_desc(u32 *desc, struct rsa_priv_f1_pdb *pdb);
 void init_rsa_priv_f2_desc(u32 *desc, struct rsa_priv_f2_pdb *pdb);
 void init_rsa_priv_f3_desc(u32 *desc, struct rsa_priv_f3_pdb *pdb);
 
+/* ECDSA operations */
+void caam_ecdsa_verify_jobdesc(u32 *desc,
+	caam_ecdsa_verify_t *ecdsa_verify);
+void caam_ecdsa_sign_jobdesc(u32 *desc,
+	caam_ecdsa_sign_t *ecdsa_sign);
+void caam_ecdsa_keygen_jobdesc(u32 *desc,
+	caam_ecdsa_keygen_t *ecdsa_keygen);
+int caam_ecdsa_verify(caam_ecdsa_verify_t *ecdsa_verify);
+int caam_ecdsa_verify_deinit(caam_ecdsa_verify_t *ecdsa_verify);
+int caam_ecdsa_verify_init(caam_ecdsa_verify_t *ecdsa_verify);
+int caam_ecdsa_sign(caam_ecdsa_sign_t *ecdsa_sign);
+int caam_ecdsa_sign_deinit(caam_ecdsa_sign_t *ecdsa_sign);
+int caam_ecdsa_sign_init(caam_ecdsa_sign_t *ecdsa_sign);
+int caam_ecdsa_keygen_init(caam_ecdsa_keygen_t *ecdsa_keygen);
+int caam_ecdsa_keygen_deinit(caam_ecdsa_keygen_t *ecdsa_keygen);
+int caam_ecdsa_keygen(caam_ecdsa_keygen_t *ecdsa_keygen);
+void caam_operation_done(struct device *dev, u32 *desc, u32 err,
+	void *context);
+const ec_curve_t *caam_select_ec_curve(int cid);
+
 #endif
-- 
2.7.4

